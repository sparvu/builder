#!/bin/sh
#
#  Kronometrix Development tools, builder the master script engine 
#
#  Copyright (c) 2022 Stefan Parvu
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

# VERSION: 4.4

usage() {

cat << END
Usage: $0 [-acht] [-p prefix_path]
          [-b build_number] [-m module_name] 
          [-P platform] pkg version

OPTIONS
  -a autonomous mode
  -c catalog check
  -P platform: x64, arm
  -b build_number: 01, 10, 102
  -m module_name: perl, openssl, curl, sysstat, scripts
  -p prefix_path: /opt/kronometrix
  -t test_mode
  -h help

  eg, builder recording 1.3.20      # build recording 1.3.20
      builder auth 1.0.0            # build analytics auth 1.0.0
      builder -P arm auth 1.0.0     # build arm analytics auth 1.0.0
      builder stats  1.0.0          # build analytics kernel stats 1.0.0
      builder mon 1.0.17            # build platform mon 1.0.17
      builder -a recording 1.8.20   # auto mode on

Notes:

   Supported packages:
       recording
       auth, admin, stats, aggregates, mesg, mon
       mqtt, avmet, vcam

   Make sure you have defined WORKSPACE_PREFIX variable before running
   builder
END
exit 1
}


# ######### #
# MAIN BODY #
# ######### #

## recording
perl_sem=0
lidn_sem=0
lcrl_sem=0
lwcl_sem=0
expat_sem=0
plnetcurl_sem=0
wrec_sem=0
recs_sem=0
test_sem=0
nrec_sem=0
ossl_sem=0
syss_sem=0
libusb_sem=0
futureio_sem=0
ioasync_sem=0
perlnethttp_sem=0
rec1_sem=0
rpm_sem=0
deb_sem=0
fbsd_pkg_sem=0

idn_done=0
libusb_done=0
expat_done=0
fio_done=0
perl_done=0
ossl_done=0
curl_done=0
cares_done=0
wrec_done=0
recs_done=0
nrec_done=0
lua_done=0
luajit_done=0
tests_done=0
netcurl_done=0
x509_done=0
expat_done=0
klib_done=0
futureio_done=0
ioasync_done=0
perlnethttp_done=0
procdaemon_done=0
perlinuxinfo_done=0
perlnetssleay_done=0
perliossl_done=0
perli2c_done=0
perlxml_done=0
perlcpan_done=0
statgrab_done=0
deviceusb_done=0
deviceserial_done=0
sysstat_done=0
tar_pkg_done=0
deb_pkg_done=0
rpm_pkg_done=0
fbsd_pkg_done=0
##

##platform
x64_sem=0
arm_sem=0
##

##auth
auth_redis_done=0
auth_openresty_done=0
auth_luatz_done=0
auth_libdate_done=0
auth_lua_resty_template_done=0
auth_lua_inspect_done=0
auth_lua_router_done=0
auth_lua_resty_http_done=0
auth_fin_done=0
auth_config_done=0
auth_tar_pkg_done=0
auth_deb_pkg_done=0
auth_rpm_pkg_done=0
auth_fbsd_pkg_done=0
##

##admin
admin_openresty_done=0
admin_luatz_done=0
admin_luafs_done=0
admin_libdate_done=0
admin_lua_resty_template_done=0
admin_lua_inspect_done=0
admin_lua_router_done=0
admin_lua_resty_http_done=0
admin_lua_resty_prettycjson_done=0
admin_fin_done=0
admin_config_done=0
admin_tar_pkg_done=0
admin_deb_pkg_done=0
admin_rpm_pkg_done=0
admin_fbsd_pkg_done=0
##

##mqtt
mqtt_openresty_done=0
mqtt_redis_done=0
mqtt_luatz_done=0
mqtt_luamqtt_done=0
mqtt_luasec_done=0
mqtt_lua_resty_template_done=0
mqtt_lua_inspect_done=0
mqtt_lua_router_done=0
mqtt_lua_resty_http_simple_done=0
mqtt_fin_done=0
mqtt_config_done=0
mqtt_tar_pkg_done=0
mqtt_deb_pkg_done=0
mqtt_rpm_pkg_done=0
mqtt_fbsd_pkg_done=0

##avmet
avmet_openresty_done=0
avmet_luatz_done=0
avmet_lua_resty_template_done=0
avmet_lua_inspect_done=0
avmet_lua_router_done=0
avmet_lua_resty_http_simple_done=0
avmet_fin_done=0
avmet_config_done=0
avmet_tar_pkg_done=0
avmet_deb_pkg_done=0
avmet_rpm_pkg_done=0
avmet_fbsd_pkg_done=0
##

##vcam
vcam_openresty_done=0
vcam_luatz_done=0
vcam_lua_resty_template_done=0
vcam_lua_inspect_done=0
vcam_lua_router_done=0
vcam_lua_resty_post_done=0
vcam_luafs_done=0
vcam_lua_resty_http_simple_done=0
vcam_fin_done=0
vcam_config_done=0
vcam_tar_pkg_done=0
vcam_deb_pkg_done=0
vcam_rpm_pkg_done=0
vcam_fbsd_pkg_done=0
##

##kernel stats
kstats_openresty_done=0
kstats_luafs_done=0
kstats_luazlib_done=0
kstats_struct_done=0
kstats_zipwriter_done=0
kstats_luatz_done=0
kstats_lua_resty_template_done=0
kstats_lua_router_done=0
kstats_lua_resty_http_done=0
kstats_lua_resty_prettycjson_done=0
kstats_libdate_done=0
kstats_redis_done=0
kstats_fin_done=0
kstats_config_done=0
kstats_tar_pkg_done=0
kstats_deb_pkg_done=0
kstats_rpm_pkg_done=0
kstats_fbsd_pkg_done=0
##


##kernel agg
kagg_openresty_done=0
kagg_luafs_done=0
kagg_luazlib_done=0
kagg_struct_done=0
kagg_zipwriter_done=0
kagg_luatz_done=0
kagg_lua_resty_template_done=0
kagg_lua_router_done=0
kagg_lua_resty_http_done=0
kagg_lua_resty_prettycjson_done=0
kagg_lua_inspect_done=0
kagg_libdate_done=0
kagg_redis_done=0
kagg_fin_done=0
kagg_config_done=0
kagg_tar_pkg_done=0
kagg_deb_pkg_done=0
kagg_rpm_pkg_done=0
kagg_fbsd_pkg_done=0
##



##mesg
mesg_openresty_done=0
mesg_lua_resty_template_done=0
mesg_lua_inspect_done=0
mesg_lua_router_done=0
mesg_lua_resty_mail_done=0
mesg_fin_done=0
mesg_config_done=0
mesg_tar_pkg_done=0
mesg_deb_pkg_done=0
mesg_rpm_pkg_done=0
mesg_fbsd_pkg_done=0
##

##mon
mon_perl_done=0
mon_perlcpan_done=0
mon_ossl_done=0
mon_perlssleay_done=0
mon_perliossl_done=0
mon_procdaemon_done=0
mon_pkg_done=0
mon_tar_pkg_done=0
mon_tests_done=0
mon_done=0



# Source Global
PWD=`dirname $0`
. ${PWD}/setenv

while getopts ":P:b:m:p:ht" arg
do
    case "${arg}" in

    P)
        platform=$OPTARG

        case "$platform" in
            x64)
                x64_sem=1
            ;;

            arm)
                arm_sem=1
            ;;

            *)
                echo "Not supported platform type!"
                usage
            ;;
        esac
    ;;

    b)
        build_num=$OPTARG
    ;;


    h)
        usage
    ;;

    p)
        iprefix=$OPTARG
        if [ ! -d $iprefix ]; then
            usage
        fi
    ;;

    m)
        module=$OPTARG
        case "$module" in
            
            perl)
                perl_sem=1
            ;;

            openssl)
                ossl_sem=1
            ;;

            curl)
                lcrl_sem=1
            ;;

            expat)
                export LD_LIBRARY_PATH=/opt/kronometrix/lib
                expat_sem=1
            ;;

            plnetcurl)
                plnetcurl_sem=1
            ;;

            futureio)
                futureio_sem=1
            ;;

            ioasync)
                ioasync_sem=1
            ;;

            perlnethttp)
                perlnethttp_sem=1
            ;;
 
            nrec)
                nrec_sem=1
            ;;

            sysstat)
              if [ "$OS_NAME" != "linux" ]; then
                echo "Error: sysstat is a Linux specific pkg !\n"
                exit 1
              fi
              syss_sem=1
            ;;

            scripts)
                recs_sem=1
            ;;

            rec1)
		rec1_sem=1
            ;;

            rpm)
                rpm_sem=1
            ;;

            deb)
                deb_sem=1
            ;;

            pkg)
                fbsd_pkg_sem=1
            ;;

            libusb)
                libusb_sem=1
            ;;

            *)
                echo "Not supported module!"
                usage
            ;;
        esac
    ;;
    
    t)
        test_sem=1
    ;;

    esac
done

shift `expr $OPTIND - 1`

# check arguments
if [ $# -lt 2 -o $# -gt 2 ]; then
    usage
fi

version=$2
module=$1


# check workspace variable

if [ ! -z "$WORKSPACE_PREFIX" ]; then
   WORKSPACE="${WORKSPACE_PREFIX}"
else
   usage
fi


# Status File
STATFILE="build.${module}.${PT_NAME}.${HOSTNAME}"
BUILD_LOG="${module}.${PT_NAME}.${HOSTNAME}.${version}.log"

# status file
if [ -f /var/tmp/${STATFILE} ]; then
    echo "Error: already running, status file: build.${module}.${PT_NAME}.${HOSTNAME}"
    exit 1
else
    touch /var/tmp/${STATFILE}
fi


case "$OS_NAME" in
    sunos)
         
	# source here the engine for Solaris
        case "$module" in
	 recording)

             iprefix=${iprefix:-/opt/kronometrix}
             iuser=krmx

             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"
             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.rec.solaris.10x
                  ;;
               
                 *)
                   usage
                 ;;
             esac
         ;;

         *)
            usage
         ;;
        esac
    ;;

    linux)

        case "$module" in
         recording)

             iprefix=${iprefix:-/opt/kronometrix}
             iuser=krmx

             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.rec.linux.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;

         auth)

             # default platform
             if [ -z "$platform" ]; then
                 if [ "$PT_NAME" = "armv6l" ]; then
                     platform="arm"
                     arm_sem=1
                 else
                     platform="x64"
                     x64_sem=1
                 fi
             fi

             iprefix=${iprefix:-/opt/kronometrix/auth}
             iuser=krmx

             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.auth.linux.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;


         admin)

             # default platform
             if [ -z "$platform" ]; then
                 if [ "$PT_NAME" = "armv6l" ]; then
                     platform="arm"
                     arm_sem=1
                 else
                     platform="x64"
                     x64_sem=1
                 fi
             fi

             iprefix=${iprefix:-/opt/kronometrix/admin}
             iuser=krmx

             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.admin.linux.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;


         avmet)
   
             # default platform
             if [ -z "$platform" ]; then
                 if [ "$PT_NAME" = "armv6l" ]; then
                     platform="arm"
                     arm_sem=1
                 else
                     platform="x64"
                     x64_sem=1
                 fi
             fi

             iprefix=${iprefix:-/opt/kronometrix/avmet}
             iuser=krmx

             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"
            
             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.avmet.linux.10x
                  ;;
             
                 *)
                   usage
                 ;;
             esac
         ;;


         mqtt)

             # default platform
             if [ -z "$platform" ]; then
                 if [ "$PT_NAME" = "armv6l" ]; then
                     platform="arm"
                     arm_sem=1
                 else
                     platform="x64"
                     x64_sem=1
                 fi
             fi

             iprefix=${iprefix:-/opt/kronometrix/mqtt}
             iuser=krmx

             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.mqtt.linux.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;

         vcam)

             # default platform
             if [ -z "$platform" ]; then
                 if [ "$PT_NAME" = "armv6l" ]; then
                     platform="arm"
                     arm_sem=1
                 else
                     platform="x64"
                     x64_sem=1
                 fi
             fi

             iprefix=${iprefix:-/opt/kronometrix/vcam}
             iuser=krmx

             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.vcam.linux.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;


         mesg)

             # default platform
             if [ -z "$platform" ]; then
                 if [ "$PT_NAME" = "armv6l" ]; then
                     platform="arm"
                     arm_sem=1
                 else
                     platform="x64"
                     x64_sem=1
                 fi
             fi

             iprefix=${iprefix:-/opt/kronometrix/mesg}
             iuser=krmx

             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.mesg.linux.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;

         stats)

             # default platform
             if [ -z "$platform" ]; then
                 if [ "$PT_NAME" = "armv6l" ]; then
                     platform="arm"
                     arm_sem=1
                 else
                     platform="x64"
                     x64_sem=1
                 fi
             fi
      
             iprefix=${iprefix:-/opt/kronometrix/kernel/stats}
             iuser=krmx
             
             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.kstats.linux.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;


         aggregates)

             # default platform
             if [ -z "$platform" ]; then
                 if [ "$PT_NAME" = "armv6l" ]; then
                     platform="arm"
                     arm_sem=1
                 else
                     platform="x64"
                     x64_sem=1
                 fi
             fi

             iprefix=${iprefix:-/opt/kronometrix/kernel/agg}
             iuser=krmx

             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.kagg.linux.10x
                  ;;
      
                 *)
                   usage
                 ;;
             esac
         ;;

         *)
            usage
         ;;
        esac

    ;;


    darwin)

        case "$module" in
         recording)

             iprefix=${iprefix:-/opt/kronometrix}
             iuser=krmx

             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.rec.darwin.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;

         *)
            usage
         ;;

        esac

    ;;

    freebsd)

        case "$module" in
         recording)

             iprefix=${iprefix:-/opt/kronometrix}
             iuser=krmx

             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.rec.freebsd.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;

         auth)

             # default platform
             if [ -z "$platform" ]; then
                 if [ "$PT_NAME" = "aarch64" ]; then
                     platform="aarch64"
                     arm_sem=1
                 else
                     platform="x64"
                     x64_sem=1
                 fi
             fi
      
             iprefix=${iprefix:-/opt/kronometrix/auth}
             iuser=krmx
             
             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.auth.freebsd.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;

         admin)

             # default platform
             if [ -z "$platform" ]; then
                 if [ "$PT_NAME" = "aarch64" ]; then
                     platform="aarch64"
                     arm_sem=1
                 else
                     platform="x64"
                     x64_sem=1
                 fi
             fi

             iprefix=${iprefix:-/opt/kronometrix/admin}
             iuser=krmx

             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.admin.freebsd.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;

         avmet)
            
             # default platform
             if [ -z "$platform" ]; then
                 if [ "$PT_NAME" = "aarch64" ]; then
                     platform="aarch64"
                     arm_sem=1
                 else
                     platform="x64"
                     x64_sem=1
                 fi
             fi

             iprefix=${iprefix:-/opt/kronometrix/avmet}
             iuser=krmx

             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.avmet.freebsd.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;


         mqtt)

             # default platform
             if [ -z "$platform" ]; then
                 if [ "$PT_NAME" = "aarch64" ]; then
                     platform="aarch64"
                     arm_sem=1
                 else
                     platform="x64"
                     x64_sem=1
                 fi
             fi

             iprefix=${iprefix:-/opt/kronometrix/mqtt}
             iuser=krmx

             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.*)
                  . ${PWD}/engine.mqtt.freebsd.12x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;

         vcam)

             # default platform
             if [ -z "$platform" ]; then
                 if [ "$PT_NAME" = "aarch64" ]; then
                     platform="aarch64"
                     arm_sem=1
                 else
                     platform="x64"
                     x64_sem=1
                 fi
             fi

             iprefix=${iprefix:-/opt/kronometrix/vcam}
             iuser=krmx

             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.vcam.freebsd.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;

         mesg)

             # default platform
             if [ -z "$platform" ]; then
                 if [ "$PT_NAME" = "aarch64" ]; then
                     platform="aarch64"
                     arm_sem=1
                 else
                     platform="x64"
                     x64_sem=1
                 fi
             fi

             iprefix=${iprefix:-/opt/kronometrix/mesg}
             iuser=krmx

             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.mesg.freebsd.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;

         stats)

             # default platform
             if [ -z "$platform" ]; then
                 if [ "$PT_NAME" = "aarch64" ]; then
                     platform="aarch64"
                     arm_sem=1
                 else
                     platform="x64"
                     x64_sem=1
                 fi
             fi
      
             iprefix=${iprefix:-/opt/kronometrix/kernel/stats}
             iuser=krmx
             
             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.kstats.freebsd.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;

         aggregates)

             # default platform
             if [ -z "$platform" ]; then
                 if [ "$PT_NAME" = "aarch64" ]; then
                     platform="aarch64"
                     arm_sem=1
                 else
                     platform="x64"
                     x64_sem=1
                 fi
             fi

             iprefix=${iprefix:-/opt/kronometrix/kernel/agg}
             iuser=krmx

             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.kagg.freebsd.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;

         mon)

             iprefix=${iprefix:-/opt/kronometrix/mon}
             iuser=krmx

             WORKSPACE="${WORKSPACE_PREFIX}/kronometrix"

             case "$version" in
                 1.[0-9]*)
                  . ${PWD}/engine.mon.freebsd.10x
                  ;;

                 *)
                   usage
                 ;;
             esac
         ;;


         *)
            usage
         ;;

        esac

    ;;

    *)
        WORKSPACE=
	echo "Not supported module!"
        usage
    ;;

esac

if [ ! -d ${WORKSPACE} ]; then
    echo "Error: Invalid workspace structure: build"
    exit 1
fi

if [ -d ${WORKSPACE}/${module} ]; then
    cd ${WORKSPACE}/${module}
else
    echo "Error: Invalid workspace structure: wrong module"
    exit 1
fi


if [ "$OS_NAME" = "sunos" ]; then
    start=`nawk 'BEGIN{print srand()}'`
else
    start=`date +%s`
fi

echo ""
echo "#################################################################"
echo "# Build Engine                                                  #"
echo "#################################################################"
echo "# Start: `date`"
if [ ! -z "$platform" ]; then
    echo "# Platform: $platform"
fi
echo "# Target: ${OS_NAME} ${PT_NAME}"
echo "# Module: $module"
echo "# Version: $version"
echo "#################################################################"

case "$module" in
    recording)
    echo "" > ${BUILD_PATH}/${BUILD_LOG}

    if [ $libusb_sem -eq 1 ]; then

        build_rec_deviceusb

    elif [ $ossl_sem -eq 1 ]; then

        build_rec_ossl

    elif [ $futureio_sem -eq 1 ]; then

        build_rec_futureio

    elif [ $ioasync_sem -eq 1 ]; then

        build_rec_ioasync

    elif [ $perlnethttp_sem -eq 1 ]; then

        build_rec_perlnethttp

    elif [ $expat_sem -eq 1 ]; then

        rm -rf /opt/kronometrix/perl/lib/site_perl/5.32.1/amd64-freebsd/auto/XML/Parser
        build_rec_expat
        build_rec_perlxml 

    elif [ $plnetcurl_sem -eq 1 ]; then
     
        build_rec_ncurl

    elif [ $rpm_sem -eq 1 ]; then

        if [ "x${DIST_ID}" = "xrhel" -o "x${DIST_ID}" = "xcentos" -o "x${DIST_ID}" = "xsles" ]; then
            build_rec_pkg
        else
            echo "Error: not a RPM installation, cannot build rpm pkg"
            rm /var/tmp/${STATFILE}
            exit 3
        fi

    elif [ $deb_sem -eq 1 ]; then

        if [ "x${DIST_ID}" = "xdebian" -o \
             "x${DIST_ID}" = "xubuntu" -o \
             "x${DIST_ID}" = "xraspbian" ]; then
            build_rec_pkg

        else
            echo "Error: not a DEB installation, cannot build deb pkg"
            rm /var/tmp/${STATFILE}
            exit 3
        fi

    elif [ $fbsd_pkg_sem -eq 1 ]; then

        build_rec_pkg

    else
 
        # build perl
        build_rec_perl

        # build libs
        build_rec_ossl
        build_rec_expat
        build_rec_curl
        build_rec_fio

        # build perl modules
        build_rec_perlnetssleay
        build_rec_perliossl
        build_rec_perlxml
        build_rec_perlcpan

        if [ "$OS_NAME" = "darwin" ]; then
            build_rec_futureio
            build_rec_ioasync
            build_rec_perlnethttp
        fi

        build_rec_ncurl
        build_rec_x509

        # linux sysperfstat / sar
        if [ "$OS_NAME" = "linux" ]; then
            build_rec_perlinuxinfo
            build_rec_sysstat
        fi

        # build by default on all FreeBSDs
        if [ "$PT_NAME" = "aarch64" ]; then
            #serial and usb connectors
            build_rec_deviceserial
            build_rec_deviceusb
      elif [ "$PT_NAME" = "armv7l" ]; then
            #serial and usb connectors
            build_rec_deviceserial
            build_rec_deviceusb
        fi

        #build_rec_lua

        build_rec_luajit

        build_rec_klib
  
        build_rec_scripts
        
        test_rec_scripts

        # currently we support Linux deb, rpm
        if [ "$OS_NAME" = "linux" -o \
             "$OS_NAME" = "freebsd"  ]; then
            build_rec_pkg
        fi
    fi
    ;;


 auth)
    echo "" > ${BUILD_PATH}/${BUILD_LOG}

    if [ $rpm_sem -eq 1 ]; then
        if [ "x${DIST_ID}" = "xrhel" -o "x${DIST_ID}" = "xcentos" ]; then
            build_auth_pkg
        else
            echo "Error: not a RPM installation, cannot build rpm pkg"
            rm /var/tmp/${STATFILE}
            exit 3
        fi
    elif [ $deb_sem -eq 1 ]; then
        if [ "x${DIST_ID}" = "xdebian" -o \
             "x${DIST_ID}" = "xubuntu" -o \
             "x${DIST_ID}" = "xraspbian" ]; then
            build_auth_pkg
        else
            echo "Error: not a DEB installation, cannot build deb pkg"
            rm /var/tmp/${STATFILE}
            exit 3
        fi
    elif [ $fbsd_pkg_sem -eq 1 ]; then
        build_auth_pkg 
    else 
        build_auth_openresty
        build_auth_template
        build_auth_router
        build_auth_http
        build_auth_luatz
        build_auth_libdate

        if [ ! -z "$build_num" ]; then
            build_auth_inspect
        fi

        build_auth_redis
        build_auth_config
        build_auth_fin

        # currently we support Linux(deb,rpm), FreeBSD(pkg)
        if [ "$OS_NAME" = "linux" -o \
             "$OS_NAME" = "freebsd"  ]; then
            build_auth_pkg
        fi

    fi
    ;;


 admin)
    echo "" > ${BUILD_PATH}/${BUILD_LOG}

    if [ $rpm_sem -eq 1 ]; then
        if [ "x${DIST_ID}" = "xrhel" -o "x${DIST_ID}" = "xcentos" ]; then
            build_admin_pkg
        else
            echo "Error: not a RPM installation, cannot build rpm pkg"
            rm /var/tmp/${STATFILE}
            exit 3
        fi
    elif [ $deb_sem -eq 1 ]; then
        if [ "x${DIST_ID}" = "xdebian" -o \
             "x${DIST_ID}" = "xubuntu" -o \
             "x${DIST_ID}" = "xraspbian" ]; then
            build_admin_pkg
        else
            echo "Error: not a DEB installation, cannot build deb pkg"
            rm /var/tmp/${STATFILE}
            exit 3
        fi
    elif [ $fbsd_pkg_sem -eq 1 ]; then
        build_admin_pkg
    else
        build_admin_openresty
        build_admin_fs
        build_admin_template
        build_admin_router
        build_admin_http
        build_admin_luatz
        build_admin_prettycjson
        build_admin_libdate

        if [ ! -z "$build_num" ]; then
            build_admin_inspect
        fi

        build_admin_config
        build_admin_fin

        # currently we support Linux(deb,rpm), FreeBSD(pkg)
        if [ "$OS_NAME" = "linux" -o \
             "$OS_NAME" = "freebsd"  ]; then
            build_admin_pkg
        fi
    fi
    ;;


 avmet)
    echo "" > ${BUILD_PATH}/${BUILD_LOG}

    if [ $rpm_sem -eq 1 ]; then
        if [ "x${DIST_ID}" = "xrhel" -o "x${DIST_ID}" = "xcentos" ]; then
            build_avmet_pkg
        else
            echo "Error: not a RPM installation, cannot build rpm pkg"
            rm /var/tmp/${STATFILE}
            exit 3
        fi
    elif [ $deb_sem -eq 1 ]; then
        if [ "x${DIST_ID}" = "xdebian" -o \
             "x${DIST_ID}" = "xubuntu" -o \
             "x${DIST_ID}" = "xraspbian" ]; then
            build_auth_pkg
        else
            echo "Error: not a DEB installation, cannot build deb pkg"
            rm /var/tmp/${STATFILE}
            exit 3
        fi
    elif [ $fbsd_pkg_sem -eq 1 ]; then
        build_avmet_pkg
    else
        build_avmet_openresty
        build_avmet_template
        build_avmet_httpsimple
        build_avmet_router
        build_avmet_luatz

        if [ ! -z "$build_num" ]; then
            build_avmet_inspect
        fi

        build_avmet_config
        build_avmet_fin

        # currently we support Linux(deb,rpm), FreeBSD(pkg)
        if [ "$OS_NAME" = "linux" -o \
             "$OS_NAME" = "freebsd"  ]; then
            build_avmet_pkg
        fi

    fi
    ;;


 mqtt)
    echo "" > ${BUILD_PATH}/${BUILD_LOG}
                     
    if [ $rpm_sem -eq 1 ]; then
        if [ "x${DIST_ID}" = "xrhel" -o "x${DIST_ID}" = "xcentos" ]; then
            build_mqtt_pkg
        else
            echo "Error: not a RPM installation, cannot build rpm pkg"
            rm /var/tmp/${STATFILE}
            exit 3
        fi
    elif [ $deb_sem -eq 1 ]; then
        if [ "x${DIST_ID}" = "xdebian" -o \
             "x${DIST_ID}" = "xubuntu" -o \
             "x${DIST_ID}" = "xraspbian" ]; then
            build_auth_pkg
        else
            echo "Error: not a DEB installation, cannot build deb pkg"
            rm /var/tmp/${STATFILE}
            exit 3
        fi
    elif [ $fbsd_pkg_sem -eq 1 ]; then
        build_mqtt_pkg
    else
        build_mqtt_openresty
        build_mqtt_template
        build_mqtt_httpsimple
        build_mqtt_router
        build_mqtt_luatz
        build_mqtt_luasec
        build_mqtt_luamqtt
        build_mqtt_redis

        if [ ! -z "$build_num" ]; then
            build_mqtt_inspect
        fi

        build_mqtt_config
        build_mqtt_fin

        # currently we support Linux(deb,rpm), FreeBSD(pkg)
        if [ "$OS_NAME" = "linux" -o \
             "$OS_NAME" = "freebsd"  ]; then
            build_mqtt_pkg
        fi

    fi
    ;;


 vcam)
    echo "" > ${BUILD_PATH}/${BUILD_LOG}

    if [ $rpm_sem -eq 1 ]; then
        if [ "x${DIST_ID}" = "xrhel" -o "x${DIST_ID}" = "xcentos" ]; then
            build_vcam_pkg
        else
            echo "Error: not a RPM installation, cannot build rpm pkg"
            rm /var/tmp/${STATFILE}
            exit 3
        fi
    elif [ $deb_sem -eq 1 ]; then
        if [ "x${DIST_ID}" = "xdebian" -o \
             "x${DIST_ID}" = "xubuntu" -o \
             "x${DIST_ID}" = "xraspbian" ]; then
            build_vcam_pkg
        else
            echo "Error: not a DEB installation, cannot build deb pkg"
            rm /var/tmp/${STATFILE}
            exit 3
        fi
    elif [ $fbsd_pkg_sem -eq 1 ]; then
        build_vcam_pkg
    else
        build_vcam_openresty
        build_vcam_post
        build_vcam_template
        build_vcam_httpsimple
        build_vcam_router
        build_vcam_luatz
        build_vcam_fs

        if [ ! -z "$build_num" ]; then
            build_vcam_inspect
        fi

        build_vcam_config
        build_vcam_fin

        # currently we support Linux(deb,rpm), FreeBSD(pkg)
        if [ "$OS_NAME" = "linux" -o \
             "$OS_NAME" = "freebsd"  ]; then
            build_vcam_pkg
        fi

    fi
    ;;

 mesg)
    echo "" > ${BUILD_PATH}/${BUILD_LOG}

    if [ $rpm_sem -eq 1 ]; then
        if [ "x${DIST_ID}" = "xrhel" -o "x${DIST_ID}" = "xcentos" ]; then
            build_mesg_pkg
        else
            echo "Error: not a RPM installation, cannot build rpm pkg"
            rm /var/tmp/${STATFILE}
            exit 3
        fi
    elif [ $deb_sem -eq 1 ]; then
        if [ "x${DIST_ID}" = "xdebian" -o \
             "x${DIST_ID}" = "xubuntu" -o \
             "x${DIST_ID}" = "xraspbian" ]; then
            build_mesg_pkg
        else
            echo "Error: not a DEB installation, cannot build deb pkg"
            rm /var/tmp/${STATFILE}
            exit 3
        fi
    elif [ $fbsd_pkg_sem -eq 1 ]; then
        build_mesg_pkg 
    else 
        build_mesg_openresty
        build_mesg_router
        build_mesg_mail

        if [ ! -z "$build_num" ]; then
            build_mesg_inspect
        fi

        build_mesg_config
        build_mesg_fin

        # currently we support Linux(deb,rpm), FreeBSD(pkg)
        if [ "$OS_NAME" = "linux" -o \
             "$OS_NAME" = "freebsd"  ]; then
            build_mesg_pkg
        fi

    fi
    ;;

 stats)
    echo "" > ${BUILD_PATH}/${BUILD_LOG}

    if [ $rpm_sem -eq 1 ]; then
        if [ "x${DIST_ID}" = "xrhel" -o "x${DIST_ID}" = "xcentos" ]; then
            build_kstats_pkg
        else
            echo "Error: not a RPM installation, cannot build rpm pkg"
            rm /var/tmp/${STATFILE}
            exit 3
        fi
    elif [ $deb_sem -eq 1 ]; then
        if [ "x${DIST_ID}" = "xdebian" -o \
             "x${DIST_ID}" = "xubuntu" -o \
             "x${DIST_ID}" = "xraspbian" ]; then
            build_kstats_pkg
        else
            echo "Error: not a DEB installation, cannot build deb pkg"
            rm /var/tmp/${STATFILE}
            exit 3
        fi
    elif [ $fbsd_pkg_sem -eq 1 ]; then
        build_kstats_pkg 
    else 
        build_kstats_openresty
        build_kstats_fs
        build_kstats_template
        build_kstats_router
        build_kstats_libdate
        build_kstats_luatz
        build_kstats_prettycjson
        build_kstats_zlib
        build_kstats_struct
        build_kstats_zip
        build_kstats_http

        if [ ! -z "$build_num" ]; then
            build_kstats_inspect
        fi

        build_kstats_redis
        build_kstats_config
        build_kstats_fin

        # currently we support Linux deb, rpm
        if [ "$OS_NAME" = "linux" -o \
             "$OS_NAME" = "freebsd"  ]; then
            build_kstats_pkg
        fi
    fi
    ;;



 aggregates)
    echo "" > ${BUILD_PATH}/${BUILD_LOG}

    if [ $rpm_sem -eq 1 ]; then
        if [ "x${DIST_ID}" = "xrhel" -o "x${DIST_ID}" = "xcentos" ]; then
            build_kagg_pkg
        else
            echo "Error: not a RPM installation, cannot build rpm pkg"
            rm /var/tmp/${STATFILE}
            exit 3
        fi
    elif [ $deb_sem -eq 1 ]; then
        if [ "x${DIST_ID}" = "xdebian" -o \
             "x${DIST_ID}" = "xubuntu" -o \
             "x${DIST_ID}" = "xraspbian" ]; then
            build_kagg_pkg
        else
            echo "Error: not a DEB installation, cannot build deb pkg"
            rm /var/tmp/${STATFILE}
            exit 3
        fi
    elif [ $fbsd_pkg_sem -eq 1 ]; then
        build_kagg_pkg
    else
        build_kagg_openresty
        build_kagg_fs
        build_kagg_template
        build_kagg_router
        build_kagg_libdate
        build_kagg_luatz
        #build_kagg_prettycjson
        #build_kagg_zlib
        #build_kagg_struct
        #build_kagg_zip
        build_kagg_http

        if [ ! -z "$build_num" ]; then
            build_kagg_inspect
        fi

        build_kagg_redis
        build_kagg_config
        build_kagg_fin

        # currently we support Linux deb, rpm
        if [ "$OS_NAME" = "linux" -o \
             "$OS_NAME" = "freebsd"  ]; then
            build_kagg_pkg
        fi
    fi
    ;;


 mon)
    echo "" > ${BUILD_PATH}/${BUILD_LOG}

    if [ $fbsd_pkg_sem -eq 1 ]; then
        build_mon_pkg 
    else 
        build_mon_perl
        build_mon_ossl
        build_mon_perlnetssleay
        build_mon_perliossl
        build_mon_perlcpan
        build_mon_scripts
        build_mon_pkg
    fi
    ;;

 *) 
    usage
 ;;

esac


# FINAL INTEGRATION MESSAGE

echo "#################################################################"
echo "# SUMMARY"
echo "# Target:  ${OS_NAME} ${PT_NAME}"
if [ ! -z "$platform" ]; then
    echo "# Platform: $platform"
fi
if [ ! -z "$COMPILER" ]; then
    echo "# Compiler: ${COMPILER}"
fi
echo "# Built on: ${OS_NAME} ${KERNEL}"
echo "#################################################################"
echo "# Module: ${module}"
echo "# Version: ${version}"
echo "# Build Date: `date`"

case "$module" in

 recording)

    if [ $perl_done -eq 1 ]; then
        echo "# perl: ok"
    else
        if [ $perl_done -eq 90 ]; then
            echo "# perl: failed"
        fi
    fi

    if [ $procdaemon_done -eq 1 ]; then
        echo "# proc-daemon: ok"
    else
        if [ $procdaemon_done -eq 90 ]; then
            echo "# proc-daemon: failed"
        fi
    fi

    if [ $ossl_done -eq 1 ]; then
        echo "# openssl: ok"
    else
        if [ $ossl_done -eq 90 ]; then
            echo "# openssl: failed"
        fi
    fi

    if [ $perlnetssleay_done -eq 1 ]; then
        echo "# Net-SSLeay: ok"
    else
        if [ $perlnetssleay_done -eq 90 ]; then
            echo "# Net-SSLeay: failed"
        fi
    fi

    if [ $perliossl_done -eq 1 ]; then
        echo "# IO-Socket-SSL: ok"
    else
        if [ $perlnetssleay_done -eq 90 ]; then
            echo "# IO-Socket-SSL: failed"
        fi
    fi

    if [ $perlinuxinfo_done -eq 1 ]; then
        echo "# Linux::Info: ok"
    else
        if [ $perlinuxinfo_done -eq 90 ]; then
            echo "# Linux::Info: failed"
        fi
    fi

    if [ $statgrab_done -eq 1 ]; then
        echo "# libstatgrab: ok"
    else
        if [ $statgrab_done -eq 90 ]; then
            echo "# libstatgrab: failed"
        fi
    fi

    if [ $expat_done -eq 1 ]; then
        echo "# expat: ok"
    else
        if [ $expat_done -eq 90 ]; then
            echo "# expat: failed"
        fi
    fi

    if [ $fio_done -eq 1 ]; then
        echo "# fio: ok"
    else
        if [ $fio_done -eq 90 ]; then
            echo "# fio: failed"
        fi
    fi

    if [ $perlcpan_done -eq 1 ]; then
        echo "# Perl CPAN: ok"
    else
        if [ $perlcpan_done -eq 90 ]; then
            echo "# Perl CPAN: failed"
        fi
    fi

    if [ $perlxml_done -eq 1 ]; then
        echo "# Perl XML::Parser: ok"
    else
        if [ $perlxml_done -eq 90 ]; then
            echo "# Perl XML::Parser: failed"
        fi
    fi

    if [ $perli2c_done -eq 1 ]; then
        echo "# Perl RPiI2C: ok"
    else
        if [ $perli2c_done -eq 90 ]; then
            echo "# Perl RPiI2C: failed"
        fi
    fi

    if [ $deviceserial_done -eq 1 ]; then
        echo "# deviceserial: ok"
    else
        if [ $deviceserial_done -eq 90 ]; then
            echo "# deviceserial: failed"
        fi
    fi

    if [ $deviceusb_done -eq 1 ]; then
        echo "# deviceusb: ok"
    else
        if [ $deviceusb_done -eq 90 ]; then
            echo "# deviceusb: failed"
        fi
    fi

    if [ $cares_done -eq 1 ]; then
        echo "# cares: ok"
    else
        if [ $cares_done -eq 90 ]; then
            echo "# cares: failed"
        fi
    fi

    if [ $curl_done -eq 1 ]; then
        echo "# curl: ok"
    else
        if [ $curl_done -eq 90 ]; then
            echo "# curl: failed"
        fi
    fi

    if [ "$OS_NAME" = "linux" ]; then
        if [ $sysstat_done -eq 1 ]; then
            echo "# sysstat: ok"
        else
            if [ $sysstat_done -eq 90 ]; then
                echo "# sysstat: failed"
            fi
        fi
    fi

    if [ $x509_done -eq 1 ]; then
        echo "# X509: ok"
    else
        if [ $x509_done -eq 90 ]; then
            echo "# X509: failed"
        fi
    fi

    if [ $lua_done -eq 1 ]; then
        echo "# Lua: ok"
    else
        if [ $lua_done -eq 90 ]; then
            echo "# Lua: failed"
        fi
    fi

    if [ $luajit_done -eq 1 ]; then
        echo "# Luajit: ok"
    else
        if [ $luajit_done -eq 90 ]; then
            echo "# Luajit: failed"
        fi
    fi

    if [ $klib_done -eq 1 ]; then
        echo "# webrec, svcrec: ok"
    else
        if [ $klib_done -eq 90 ]; then
            echo "# webrec, svcrec: failed"
        fi
    fi

    if [ $wrec_done -eq 1 ]; then
        echo "# webrec: ok"
    else
        if [ $wrec_done -eq 90 ]; then
            echo "# webrec: failed"
        fi
    fi


    if [ $tests_done -eq 1 ]; then
        echo "# tests: ok"
    else
        if [ $tests_done -eq 90 ]; then
            echo "# tests: failed"
        fi
    fi


    if [ $tar_pkg_done -eq 1 ]; then
        echo "# tar pkg: ok"
    else
        if [ $tar_pkg_done -eq 90 ]; then
            echo "# tar pkg: failed"
        fi
    fi

    if [ $rpm_pkg_done -eq 1 ]; then
        echo "# rpm pkg: ok"
    else
        if [ $rpm_pkg_done -eq 90 ]; then
            echo "# rpm pkg: failed"
        fi
    fi

    if [ $deb_pkg_done -eq 1 ]; then
        echo "# deb pkg: ok"
    else
        if [ $deb_pkg_done -eq 90 ]; then
            echo "# deb pkg: failed"
        fi
    fi

    if [ $fbsd_pkg_done -eq 1 ]; then
        echo "# freebsd pkg: ok"
    else
        if [ $fbsd_pkg_done -eq 90 ]; then
            echo "# freebsd pkg: failed"
        fi
    fi

    if [ $recs_done -eq 1 ]; then
        echo "# FINALIZE: ok"
    else
        if [ $recs_done -eq 90 ]; then
            echo "# FINALIZE: failed"
        fi
    fi

 ;;


 auth)

    if [ $auth_openresty_done -ne 0 ]; then
        if [ $auth_openresty_done -eq 1 ]; then
            echo "# openresty: built and integrated"
        else
            if [ $auth_openresty_done -eq 90 ]; then
                echo "# openresty: not integrated"
            fi
        fi
    fi

    if [ $auth_lua_resty_template_done -ne 0 ]; then
        if [ $auth_lua_resty_template_done -eq 1 ]; then
            echo  "# lib lua-resty-template: built and integrated"
        else
            if [ $auth_lua_resty_template_done -eq 90 ]; then
                echo  "# lib lua-resty-template: not integrated"
            fi
        fi
    fi

    if [ $auth_lua_router_done -ne 0 ]; then
        if [ $auth_lua_router_done -eq 1 ]; then
            echo  "# lib router.lua: built and integrated"
        else
            if [ $auth_lua_router_done -eq 90 ]; then
                echo  "# lib router.lua: not integrated"
            fi
        fi
    fi

    if [ $auth_lua_resty_http_done -ne 0 ]; then
        if [ $auth_lua_resty_http_done -eq 1 ]; then
            echo  "# lib http: built and integrated"
        else
            if [ $auth_lua_resty_http_done -eq 90 ]; then
                echo  "# lib http: not integrated"
            fi
        fi
    fi

    if [ $auth_luatz_done -ne 0 ]; then
        if [ $auth_luatz_done -eq 1 ]; then
            echo  "# lib luatz: built and integrated"
        else
            if [ $auth_luatz_done -eq 90 ]; then
                echo  "# lib luatz: not integrated"
            fi
        fi
    fi

    if [ $auth_libdate_done -ne 0 ]; then
        if [ $auth_libdate_done -eq 1 ]; then
            echo  "# lib date.lua: built and integrated"
        else
            if [ $auth_libdone_done -eq 90 ]; then
                echo  "# lib date.lua: not integrated"
            fi
        fi
    fi

    if [ ! -z "$build_num" ]; then
        if [ $auth_lua_inspect_done -ne 0 ]; then
            if [ $auth_lua_inspect_done -eq 1 ]; then
                echo  "# lib inspect.lua: built and integrated"
            else
                if [ $auth_lua_inspect_done -eq 90 ]; then
                    echo  "# lib inspect.lua: not integrated"
                fi
            fi
        fi
    fi

    if [ $auth_redis_done -ne 0 ]; then
        if [ $auth_redis_done -eq 1 ]; then
            echo  "# redis: built and integrated"
        else
            if [ $auth_redis_done -eq 90 ]; then
                echo  "# redis: not integrated"
            fi
        fi
    fi

    if [ $auth_config_done -ne 0 ]; then
        if [ $auth_config_done -eq 1 ]; then
            echo  "# analytics-auth nginx.conf: done"
        else
            if [ $auth_config_done -eq 90 ]; then
                echo  "# analytics-auth nginx.conf: not done"
            fi
        fi
    fi

    if [ $auth_tar_pkg_done -eq 1 ]; then
        echo "# tar pkg: ok"
    else
        if [ $auth_tar_pkg_done -eq 90 ]; then
            echo "# tar pkg: failed"
        fi
    fi

    if [ $auth_rpm_pkg_done -eq 1 ]; then
        echo "# rpm pkg: ok"
    else
        if [ $auth_rpm_pkg_done -eq 90 ]; then
            echo "# rpm pkg: failed"
        fi
    fi

    if [ $auth_deb_pkg_done -eq 1 ]; then
        echo "# deb pkg: ok"
    else
        if [ $auth_deb_pkg_done -eq 90 ]; then
            echo "# deb pkg: failed"
        fi
    fi

    if [ $auth_fbsd_pkg_done -eq 1 ]; then
        echo "# freebsd pkg: ok"
    else
        if [ $auth_fbsd_pkg_done -eq 90 ]; then
            echo "# freebsd pkg: failed"
        fi
    fi

    if [ $auth_fin_done -ne 0 ]; then
        if [ $auth_fin_done -eq 1 ]; then
            echo  "# FINALIZE: done"
        else
            if [ $auth_fin_done -eq 90 ]; then
                echo  "# FINALIZE: not done"
            fi
        fi
    fi

 ;;


 admin)

    if [ $admin_openresty_done -ne 0 ]; then
        if [ $admin_openresty_done -eq 1 ]; then
            echo "# openresty: built and integrated"
        else
            if [ $admin_openresty_done -eq 90 ]; then
                echo "# openresty: not integrated"
            fi
        fi
    fi

    if [ $admin_lua_resty_template_done -ne 0 ]; then
        if [ $admin_lua_resty_template_done -eq 1 ]; then
            echo  "# lib lua-resty-template: built and integrated"
        else
            if [ $admin_lua_resty_template_done -eq 90 ]; then
                echo  "# lib lua-resty-template: not integrated"
            fi
        fi
    fi

    if [ $admin_lua_router_done -ne 0 ]; then
        if [ $admin_lua_router_done -eq 1 ]; then
            echo  "# lib router.lua: built and integrated"
        else
            if [ $admin_lua_router_done -eq 90 ]; then
                echo  "# lib router.lua: not integrated"
            fi
        fi
    fi

    if [ $admin_lua_resty_http_done -ne 0 ]; then
        if [ $admin_lua_resty_http_done -eq 1 ]; then
            echo  "# lib http: built and integrated"
        else
            if [ $admin_lua_resty_http_done -eq 90 ]; then
                echo  "# lib http: not integrated"
            fi
        fi
    fi

    if [ $admin_luatz_done -ne 0 ]; then
        if [ $admin_luatz_done -eq 1 ]; then
            echo  "# lib luatz: built and integrated"
        else
            if [ $admin_luatz_done -eq 90 ]; then
                echo  "# lib luatz: not integrated"
            fi
        fi
    fi

    if [ $admin_libdate_done -ne 0 ]; then
        if [ $admin_libdate_done -eq 1 ]; then
            echo  "# lib date.lua: built and integrated"
        else
            if [ $admin_libdone_done -eq 90 ]; then
                echo  "# lib date.lua: not integrated"
            fi
        fi
    fi

    if [ $admin_luafs_done -ne 0 ]; then
        if [ $admin_luafs_done -eq 1 ]; then
            echo  "# lib luafilesystem: built and integrated"
        else
            if [ $admin_luafs_done -eq 90 ]; then
                echo  "# lib luafilesystem: not integrated"
            fi
        fi
    fi

    if [ $admin_lua_resty_prettycjson_done -ne 0 ]; then
        if [ $admin_lua_resty_prettycjson_done -eq 1 ]; then
            echo  "# lib prettycjson.lua: built and integrated"
        else
            if [ $admin_lua_resty_prettycjson_done -eq 90 ]; then
                echo  "# lib prettycjson.lua: not integrated"
            fi
        fi
    fi

    if [ ! -z "$build_num" ]; then
        if [ $admin_lua_inspect_done -ne 0 ]; then
            if [ $admin_lua_inspect_done -eq 1 ]; then
                echo  "# lib inspect.lua: built and integrated"
            else
                if [ $admin_lua_inspect_done -eq 90 ]; then
                    echo  "# lib inspect.lua: not integrated"
                fi
            fi
        fi
    fi

    if [ $admin_config_done -ne 0 ]; then
        if [ $admin_config_done -eq 1 ]; then
            echo  "# analytics-admin nginx.conf: done"
        else
            if [ $admin_config_done -eq 90 ]; then
                echo  "# analytics-admin nginx.conf: not done"
            fi
        fi
    fi

    if [ $admin_tar_pkg_done -eq 1 ]; then
        echo "# tar pkg: ok"
    else
        if [ $admin_tar_pkg_done -eq 90 ]; then
            echo "# tar pkg: failed"
        fi
    fi

    if [ $admin_rpm_pkg_done -eq 1 ]; then
        echo "# rpm pkg: ok"
    else
        if [ $admin_rpm_pkg_done -eq 90 ]; then
            echo "# rpm pkg: failed"
        fi
    fi

    if [ $admin_deb_pkg_done -eq 1 ]; then
        echo "# deb pkg: ok"
    else
        if [ $admin_deb_pkg_done -eq 90 ]; then
            echo "# deb pkg: failed"
        fi
    fi

    if [ $admin_fbsd_pkg_done -eq 1 ]; then
        echo "# freebsd pkg: ok"
    else
        if [ $admin_fbsd_pkg_done -eq 90 ]; then
            echo "# freebsd pkg: failed"
        fi
    fi

    if [ $admin_fin_done -ne 0 ]; then
        if [ $admin_fin_done -eq 1 ]; then
            echo  "# FINALIZE: done"
        else
            if [ $admin_fin_done -eq 90 ]; then
                echo  "# FINALIZE: not done"
            fi
        fi
    fi

 ;;

 avmet)

    if [ $avmet_openresty_done -ne 0 ]; then
        if [ $avmet_openresty_done -eq 1 ]; then
            echo "# openresty: built and integrated"
        else
            if [ $avmet_openresty_done -eq 90 ]; then
                echo "# openresty: not integrated"
            fi
        fi
    fi

    if [ $avmet_lua_resty_template_done -ne 0 ]; then
        if [ $avmet_lua_resty_template_done -eq 1 ]; then
            echo  "# lib lua-resty-template: built and integrated"
        else
            if [ $avmet_lua_resty_template_done -eq 90 ]; then
                echo  "# lib lua-resty-template: not integrated"
            fi
        fi
    fi

    if [ $avmet_lua_router_done -ne 0 ]; then
        if [ $avmet_lua_router_done -eq 1 ]; then
            echo  "# lib router.lua: built and integrated"
        else
            if [ $avmet_lua_router_done -eq 90 ]; then
                echo  "# lib router.lua: not integrated"
            fi
        fi
    fi

    if [ $avmet_lua_resty_http_simple_done -ne 0 ]; then
        if [ $avmet_lua_resty_http_simple_done -eq 1 ]; then
            echo  "# lib http simple.lua: built and integrated"
        else
            if [ $avmet_lua_resty_http_simple_done -eq 90 ]; then
                echo  "# lib http simple.lua: not integrated"
            fi
        fi
    fi

    if [ $avmet_luatz_done -ne 0 ]; then
        if [ $avmet_luatz_done -eq 1 ]; then
            echo  "# lib luatz: built and integrated"
        else
            if [ $avmet_luatz_done -eq 90 ]; then
                echo  "# lib luatz: not integrated"
            fi
        fi
    fi

    if [ ! -z "$build_num" ]; then
        if [ $avmet_lua_inspect_done -ne 0 ]; then
            if [ $avmet_lua_inspect_done -eq 1 ]; then
                echo  "# lib inspect.lua: built and integrated"
            else
                if [ $avmet_lua_inspect_done -eq 90 ]; then
                    echo  "# lib inspect.lua: not integrated"
                fi
            fi
        fi
    fi

    if [ $avmet_config_done -ne 0 ]; then
        if [ $avmet_config_done -eq 1 ]; then
            echo  "# analytics-avmet nginx.conf: done"
        else
            if [ $avmet_config_done -eq 90 ]; then
                echo  "# analytics-avmet nginx.conf: not done"
            fi
        fi
    fi

    if [ $avmet_tar_pkg_done -eq 1 ]; then
        echo "# tar pkg: ok"
    else
        if [ $avmet_tar_pkg_done -eq 90 ]; then
            echo "# tar pkg: failed"
        fi
    fi

    if [ $avmet_rpm_pkg_done -eq 1 ]; then
        echo "# rpm pkg: ok"
    else
        if [ $avmet_rpm_pkg_done -eq 90 ]; then
            echo "# rpm pkg: failed"
        fi
    fi

    if [ $avmet_deb_pkg_done -eq 1 ]; then
        echo "# deb pkg: ok"
    else
        if [ $avmet_deb_pkg_done -eq 90 ]; then
            echo "# deb pkg: failed"
        fi
    fi

    if [ $avmet_fbsd_pkg_done -eq 1 ]; then
        echo "# freebsd pkg: ok"
    else
        if [ $avmet_fbsd_pkg_done -eq 90 ]; then
            echo "# freebsd pkg: failed"
        fi
    fi

    if [ $avmet_fin_done -ne 0 ]; then
        if [ $avmet_fin_done -eq 1 ]; then
            echo  "# FINALIZE: done"
        else
            if [ $avmet_fin_done -eq 90 ]; then
                echo  "# FINALIZE: not done"
            fi
        fi
    fi

 ;;

 mqtt)

    if [ $mqtt_openresty_done -ne 0 ]; then
        if [ $mqtt_openresty_done -eq 1 ]; then
            echo "# openresty: built and integrated"
        else
            if [ $mqtt_openresty_done -eq 90 ]; then
                echo "# openresty: not integrated"
            fi
        fi
    fi
            
    if [ $mqtt_lua_resty_template_done -ne 0 ]; then
        if [ $mqtt_lua_resty_template_done -eq 1 ]; then
            echo  "# lib lua-resty-template: built and integrated"
        else
            if [ $mqtt_lua_resty_template_done -eq 90 ]; then
                echo  "# lib lua-resty-template: not integrated"
            fi
        fi
    fi
            
    if [ $mqtt_lua_router_done -ne 0 ]; then
        if [ $mqtt_lua_router_done -eq 1 ]; then
            echo  "# lib router.lua: built and integrated"
        else
            if [ $mqtt_lua_router_done -eq 90 ]; then
                echo  "# lib router.lua: not integrated"
            fi
        fi
    fi

    if [ $mqtt_lua_resty_http_simple_done -ne 0 ]; then
        if [ $mqtt_lua_resty_http_simple_done -eq 1 ]; then
            echo  "# lib http simple.lua: built and integrated"
        else
            if [ $mqtt_lua_resty_http_simple_done -eq 90 ]; then
                echo  "# lib http simple.lua: not integrated"
            fi
        fi
    fi

    if [ $mqtt_lua_router_done -ne 0 ]; then
        if [ $mqtt_lua_router_done -eq 1 ]; then
            echo  "# lib router.lua: built and integrated"
        else
            if [ $mqtt_lua_router_done -eq 90 ]; then
                echo  "# lib router.lua: not integrated"
            fi
        fi
    fi

    if [ $mqtt_lua_resty_http_simple_done -ne 0 ]; then
        if [ $mqtt_lua_resty_http_simple_done -eq 1 ]; then
            echo  "# lib http simple.lua: built and integrated"
        else
            if [ $mqtt_lua_resty_http_simple_done -eq 90 ]; then
                echo  "# lib http simple.lua: not integrated"
            fi
        fi
    fi

    if [ $mqtt_luatz_done -ne 0 ]; then
        if [ $mqtt_luatz_done -eq 1 ]; then
            echo  "# lib luatz: built and integrated"
        else
            if [ $mqtt_luatz_done -eq 90 ]; then
                echo  "# lib luatz: not integrated"
            fi
        fi
    fi

    if [ $mqtt_luamqtt_done -ne 0 ]; then
        if [ $mqtt_luamqtt_done -eq 1 ]; then
            echo  "# lib luamqtt: built and integrated"
        else
            if [ $mqtt_luamqtt_done -eq 90 ]; then
                echo  "# lib luamqtt: not integrated"
            fi
        fi
    fi

    if [ $mqtt_luasec_done -ne 0 ]; then
        if [ $mqtt_luasec_done -eq 1 ]; then
            echo  "# lib luasec: built and integrated"
        else
            if [ $mqtt_luasec_done -eq 90 ]; then
                echo  "# lib luasec: not integrated"
            fi
        fi
    fi

    if [ $mqtt_redis_done -ne 0 ]; then
        if [ $mqtt_redis_done -eq 1 ]; then
            echo  "# redis: built and integrated"
        else
            if [ $mqtt_redis_done -eq 90 ]; then
                echo  "# redis: not integrated"
            fi
        fi
    fi

    if [ ! -z "$build_num" ]; then
        if [ $mqtt_lua_inspect_done -ne 0 ]; then
            if [ $mqtt_lua_inspect_done -eq 1 ]; then
                echo  "# lib inspect.lua: built and integrated"
            else
                if [ $mqtt_lua_inspect_done -eq 90 ]; then
                    echo  "# lib inspect.lua: not integrated"
                fi
            fi
        fi
    fi

    if [ $mqtt_config_done -ne 0 ]; then
        if [ $mqtt_config_done -eq 1 ]; then
            echo  "# analytics-mqtt nginx.conf: done"
        else
            if [ $mqtt_config_done -eq 90 ]; then
                echo  "# analytics-mqtt nginx.conf: not done"
            fi
        fi
    fi

    if [ $mqtt_tar_pkg_done -eq 1 ]; then
        echo "# tar pkg: ok"
    else
        if [ $mqtt_tar_pkg_done -eq 90 ]; then
            echo "# tar pkg: failed"
        fi
    fi

    if [ $mqtt_rpm_pkg_done -eq 1 ]; then
        echo "# rpm pkg: ok"
    else
        if [ $mqtt_rpm_pkg_done -eq 90 ]; then
            echo "# rpm pkg: failed"
        fi
    fi

    if [ $mqtt_deb_pkg_done -eq 1 ]; then
        echo "# deb pkg: ok"
    else
        if [ $mqtt_deb_pkg_done -eq 90 ]; then
            echo "# deb pkg: failed"
        fi
    fi

    if [ $mqtt_fbsd_pkg_done -eq 1 ]; then
        echo "# freebsd pkg: ok"
    else
        if [ $mqtt_fbsd_pkg_done -eq 90 ]; then
            echo "# freebsd pkg: failed"
        fi
    fi

    if [ $mqtt_fbsd_pkg_done -eq 1 ]; then
        echo "# freebsd pkg: ok"
    else
        if [ $mqtt_fbsd_pkg_done -eq 90 ]; then
            echo "# freebsd pkg: failed"
        fi
    fi
        
    if [ $mqtt_fin_done -ne 0 ]; then
        if [ $mqtt_fin_done -eq 1 ]; then
            echo  "# FINALIZE: done"
        else
            if [ $mqtt_fin_done -eq 90 ]; then
                echo  "# FINALIZE: not done"
            fi
        fi
    fi

 ;;


 vcam)
        
    if [ $vcam_openresty_done -ne 0 ]; then
        if [ $vcam_openresty_done -eq 1 ]; then
            echo "# openresty: built and integrated"
        else
            if [ $vcam_openresty_done -eq 90 ]; then
                echo "# openresty: not integrated"
            fi
        fi
    fi
        
    if [ $vcam_lua_resty_template_done -ne 0 ]; then
        if [ $vcam_lua_resty_template_done -eq 1 ]; then
            echo  "# lib lua-resty-template: built and integrated"
        else
            if [ $vcam_lua_resty_template_done -eq 90 ]; then
                echo  "# lib lua-resty-template: not integrated"
            fi
        fi
    fi

    if [ $vcam_lua_resty_post_done -ne 0 ]; then
        if [ $vcam_lua_resty_post_done -eq 1 ]; then
            echo  "# lib lua-resty-post: built and integrated"
        else
            if [ $vcam_lua_resty_post_done -eq 90 ]; then
                echo  "# lib lua-resty-post: not integrated"
            fi
        fi
    fi

    if [ $vcam_lua_router_done -ne 0 ]; then
        if [ $vcam_lua_router_done -eq 1 ]; then
            echo  "# lib router.lua: built and integrated"
        else
            if [ $vcam_lua_router_done -eq 90 ]; then
                echo  "# lib router.lua: not integrated"
            fi
        fi
    fi

    if [ $vcam_lua_resty_http_simple_done -ne 0 ]; then
        if [ $vcam_lua_resty_http_simple_done -eq 1 ]; then
            echo  "# lib http simple.lua: built and integrated"
        else
            if [ $vcam_lua_resty_http_simple_done -eq 90 ]; then
                echo  "# lib http simple.lua: not integrated"
            fi
        fi
    fi

    if [ $vcam_luatz_done -ne 0 ]; then
        if [ $vcam_luatz_done -eq 1 ]; then
            echo  "# lib luatz: built and integrated"
        else
            if [ $vcam_luatz_done -eq 90 ]; then
                echo  "# lib luatz: not integrated"
            fi
        fi
    fi

    if [ $vcam_luafs_done -ne 0 ]; then
        if [ $vcam_luafs_done -eq 1 ]; then
            echo  "# lib luafileystem: built and integrated"
        else
            if [ $vcam_luafs_done -eq 90 ]; then
                echo  "# lib luafilesystem: not integrated"
            fi
        fi
    fi

    if [ ! -z "$build_num" ]; then
        if [ $vcam_lua_inspect_done -ne 0 ]; then
            if [ $vcam_lua_inspect_done -eq 1 ]; then
                echo  "# lib inspect.lua: built and integrated"
            else
                if [ $vcam_lua_inspect_done -eq 90 ]; then
                    echo  "# lib inspect.lua: not integrated"
                fi
            fi
        fi
    fi

    if [ $vcam_config_done -ne 0 ]; then
        if [ $vcam_config_done -eq 1 ]; then
            echo  "# analytics-vcam nginx.conf: done"
        else
            if [ $vcam_config_done -eq 90 ]; then
                echo  "# analytics-vcam nginx.conf: not done"
            fi
        fi
    fi

    if [ $vcam_tar_pkg_done -eq 1 ]; then
        echo "# tar pkg: ok"
    else
        if [ $vcam_tar_pkg_done -eq 90 ]; then
            echo "# tar pkg: failed"
        fi
    fi

    if [ $vcam_rpm_pkg_done -eq 1 ]; then
        echo "# rpm pkg: ok"
    else
        if [ $vcam_rpm_pkg_done -eq 90 ]; then
            echo "# rpm pkg: failed"
        fi
    fi

    if [ $vcam_deb_pkg_done -eq 1 ]; then
        echo "# deb pkg: ok"
    else
        if [ $vcam_deb_pkg_done -eq 90 ]; then
            echo "# deb pkg: failed"
        fi
    fi

    if [ $vcam_fbsd_pkg_done -eq 1 ]; then
        echo "# freebsd pkg: ok"
    else
        if [ $vcam_fbsd_pkg_done -eq 90 ]; then
            echo "# freebsd pkg: failed"
        fi
    fi

    if [ $vcam_fin_done -ne 0 ]; then
        if [ $vcam_fin_done -eq 1 ]; then
            echo  "# FINALIZE: done"
        else
            if [ $vcam_fin_done -eq 90 ]; then
                echo  "# FINALIZE: not done"
            fi
        fi
    fi

 ;;


 mon)

    if [ $mon_perl_done -ne 0 ]; then
        if [ $mon_perl_done -eq 1 ]; then
            echo "# perl: built and integrated"
        else
            if [ $mon_perl_done -eq 90 ]; then
                echo "# perl: not integrated"
            fi
        fi
    fi

    if [ $mon_ossl_done -eq 1 ]; then
        echo "# openssl: ok"
    else
        if [ $mon_ossl_done -eq 90 ]; then
            echo "# openssl: failed"
        fi
    fi

    if [ $mon_perlcpan_done -eq 1 ]; then
        echo "# Perl CPAN: ok"
    else
        if [ $mon_perlcpan_done -eq 90 ]; then
            echo "# Perl CPAN: failed"
        fi
    fi

    if [ $mon_perlssleay_done -eq 1 ]; then
        echo "# Net-SSLeay: ok"
    else
        if [ $mon_perlssleay_done -eq 90 ]; then
            echo "# Net-SSLeay: failed"
        fi
    fi

    if [ $mon_perliossl_done -eq 1 ]; then
        echo "# IO-Socket-SSL: ok"
    else
        if [ $mon_perlnetssleay_done -eq 90 ]; then
            echo "# IO-Socket-SSL: failed"
        fi
    fi

    if [ $mon_tar_pkg_done -eq 1 ]; then
        echo "# tar pkg: ok"
    else
        if [ $mon_tar_pkg_done -eq 90 ]; then
            echo "# tar pkg: failed"
        fi
    fi

    if [ $mon_pkg_done -eq 1 ]; then
        echo "# freebsd pkg: ok"
    else
        if [ $mon_pkg_done -eq 90 ]; then
            echo "# freebsd pkg: failed"
        fi
    fi

    if [ $mon_tests_done -eq 1 ]; then
        echo "# tests: ok"
    else
        if [ $mon_tests_done -eq 90 ]; then
            echo "# tests: failed"
        fi
    fi      
 ;;

 mesg)

    if [ $mesg_openresty_done -ne 0 ]; then
        if [ $mesg_openresty_done -eq 1 ]; then
            echo "# openresty: built and integrated"
        else
            if [ $mesg_openresty_done -eq 90 ]; then
                echo "# openresty: not integrated"
            fi
        fi
    fi

    if [ $mesg_lua_resty_template_done -ne 0 ]; then
        if [ $mesg_lua_resty_template_done -eq 1 ]; then
            echo  "# lib lua-resty-template: built and integrated"
        else
            if [ $mesg_lua_resty_template_done -eq 90 ]; then
                echo  "# lib lua-resty-template: not integrated"
            fi
        fi
    fi

    if [ $mesg_lua_router_done -ne 0 ]; then
        if [ $mesg_lua_router_done -eq 1 ]; then
            echo  "# lib router.lua: built and integrated"
        else
            if [ $mesg_lua_router_done -eq 90 ]; then
                echo  "# lib router.lua: not integrated"
            fi
        fi
    fi

    if [ $mesg_lua_resty_mail_done -ne 0 ]; then
        if [ $mesg_lua_resty_mail_done -eq 1 ]; then
            echo  "# lib mail.lua: built and integrated"
        else
            if [ $mesg_lua_resty_mail_done -eq 90 ]; then
                echo  "# lib mail.lua: not integrated"
            fi
        fi
    fi

    if [ ! -z "$build_num" ]; then
        if [ $mesg_lua_inspect_done -ne 0 ]; then
            if [ $mesg_lua_inspect_done -eq 1 ]; then
                echo  "# lib inspect.lua: built and integrated"
            else
                if [ $mesg_lua_inspect_done -eq 90 ]; then
                    echo  "# lib inspect.lua: not integrated"
                fi
            fi
        fi
    fi

    if [ $mesg_config_done -ne 0 ]; then
        if [ $mesg_config_done -eq 1 ]; then
            echo  "# analytics-mesg nginx.conf: done"
        else
            if [ $mesg_config_done -eq 90 ]; then
                echo  "# analytics-mesg nginx.conf: not done"
            fi
        fi
    fi

    if [ $mesg_tar_pkg_done -eq 1 ]; then
        echo "# tar pkg: ok"
    else
        if [ $mesg_tar_pkg_done -eq 90 ]; then
            echo "# tar pkg: failed"
        fi
    fi

    if [ $mesg_rpm_pkg_done -eq 1 ]; then
        echo "# rpm pkg: ok"
    else
        if [ $mesg_rpm_pkg_done -eq 90 ]; then
            echo "# rpm pkg: failed"
        fi
    fi

    if [ $mesg_deb_pkg_done -eq 1 ]; then
        echo "# deb pkg: ok"
    else
        if [ $mesg_deb_pkg_done -eq 90 ]; then
            echo "# deb pkg: failed"
        fi
    fi

    if [ $mesg_fbsd_pkg_done -eq 1 ]; then
        echo "# freebsd pkg: ok"
    else
        if [ $mesg_fbsd_pkg_done -eq 90 ]; then
            echo "# freebsd pkg: failed"
        fi
    fi

    if [ $mesg_fin_done -ne 0 ]; then
        if [ $mesg_fin_done -eq 1 ]; then
            echo  "# FINALIZE: done"
        else
            if [ $mesg_fin_done -eq 90 ]; then
                echo  "# FINALIZE: not done"
            fi
        fi
    fi

 ;;

 stats)

    if [ $kstats_openresty_done -ne 0 ]; then
        if [ $kstats_openresty_done -eq 1 ]; then
            echo "# openresty: built and integrated"
        else
            if [ $kstats_openresty_done -eq 90 ]; then
                echo "# openresty: not integrated"
            fi
        fi
    fi

    if [ $kstats_luafs_done -ne 0 ]; then
        if [ $kstats_luafs_done -eq 1 ]; then
            echo  "# lib luafilesystem: built and integrated"
        else
            if [ $kstats_luafs_done -eq 90 ]; then
                echo  "# lib luafilesystem: not integrated"
            fi
        fi
    fi

    if [ $kstats_lua_resty_template_done -ne 0 ]; then
        if [ $kstats_lua_resty_template_done -eq 1 ]; then
            echo  "# lib lua-resty-template: built and integrated"
        else
            if [ $kstats_lua_resty_template_done -eq 90 ]; then
                echo  "# lib lua-resty-template: not integrated"
            fi
        fi
    fi

    if [ $kstats_lua_router_done -ne 0 ]; then
        if [ $kstats_lua_router_done -eq 1 ]; then
            echo  "# lib router.lua: built and integrated"
        else
            if [ $kstats_lua_router_done -eq 90 ]; then
                echo  "# lib router.lua: not integrated"
            fi
        fi
    fi

    if [ $kstats_libdate_done -ne 0 ]; then
        if [ $kstats_libdate_done -eq 1 ]; then
            echo  "# lib date.lua: built and integrated"
        else
            if [ $kstats_libdone_done -eq 90 ]; then
                echo  "# lib date.lua: not integrated"
            fi
        fi
    fi

    if [ $kstats_lua_resty_prettycjson_done -ne 0 ]; then
        if [ $kstats_lua_resty_prettycjson_done -eq 1 ]; then
            echo  "# lib prettycjson.lua: built and integrated"
        else
            if [ $kstats_lua_resty_prettycjson_done -eq 90 ]; then
                echo  "# lib prettycjson.lua: not integrated"
            fi
        fi
    fi

    if [ $kstats_luatz_done -ne 0 ]; then
        if [ $kstats_luatz_done -eq 1 ]; then
            echo  "# lib luatz: built and integrated"
        else
            if [ $kstats_luatz_done -eq 90 ]; then
                echo  "# lib luatz: not integrated"
            fi
        fi
    fi

    if [ $kstats_luazlib_done -ne 0 ]; then
        if [ $kstats_luazlib_done -eq 1 ]; then
            echo  "# lib lua-zlib: built and integrated"
        else
            if [ $kstats_luazlib_done -eq 90 ]; then
                echo  "# lib luazlib: not integrated"
            fi
        fi
    fi

    if [ $kstats_struct_done -ne 0 ]; then
        if [ $kstats_struct_done -eq 1 ]; then
            echo  "# lib struct: built and integrated"
        else
            if [ $kstats_struct_done -eq 90 ]; then
                echo  "# lib struct: not integrated"
            fi
        fi
    fi

    if [ $kstats_zipwriter_done -ne 0 ]; then
        if [ $kstats_zipwriter_done -eq 1 ]; then
            echo  "# lib zipwriter: built and integrated"
        else
            if [ $kstats_zipwriter_done -eq 90 ]; then
                echo  "# lib zipwriter: not integrated"
            fi
        fi
    fi

    if [ $kstats_lua_resty_http_done -ne 0 ]; then
        if [ $kstats_lua_resty_http_done -eq 1 ]; then
            echo  "# lib lua-resty-http: built and integrated"
        else
            if [ $kstats_lua_resty_http_done -eq 90 ]; then
                echo  "# lib lua-resty-http: not integrated"
            fi
        fi
    fi

    if [ ! -z "$build_num" ]; then
        if [ $kstats_lua_inspect_done -ne 0 ]; then
            if [ $kstats_lua_inspect_done -eq 1 ]; then
                echo  "# lib inspect.lua: built and integrated"
            else
                if [ $kstats_lua_inspect_done -eq 90 ]; then
                    echo  "# lib inspect.lua: not integrated"
                fi
            fi
        fi
    fi

    if [ $kstats_redis_done -ne 0 ]; then
        if [ $kstats_redis_done -eq 1 ]; then
            echo  "# redis: built and integrated"
        else
            if [ $kstats_redis_done -eq 90 ]; then
                echo  "# redis: not integrated"
            fi
        fi
    fi

    if [ $kstats_config_done -ne 0 ]; then
        if [ $kstats_config_done -eq 1 ]; then
            echo  "# analytics-kernel nginx.conf: done"
        else
            if [ $kstats_config_done -eq 90 ]; then
                echo  "# analytics-kernel nginx.conf: not done"
            fi
        fi
    fi

    if [ $kstats_tar_pkg_done -eq 1 ]; then
        echo "# tar pkg: ok"
    else
        if [ $kstats_tar_pkg_done -eq 90 ]; then
            echo "# tar pkg: failed"
        fi
    fi

    if [ $kstats_rpm_pkg_done -eq 1 ]; then
        echo "# rpm pkg: ok"
    else
        if [ $kstats_rpm_pkg_done -eq 90 ]; then
            echo "# rpm pkg: failed"
        fi
    fi

    if [ $kstats_deb_pkg_done -eq 1 ]; then
        echo "# deb pkg: ok"
    else
        if [ $kstats_deb_pkg_done -eq 90 ]; then
            echo "# deb pkg: failed"
        fi
    fi

    if [ $kstats_fbsd_pkg_done -eq 1 ]; then
        echo "# freebsd pkg: ok"
    else
        if [ $kstats_fbsd_pkg_done -eq 90 ]; then
            echo "# freebsd pkg: failed"
        fi
    fi

    if [ $kstats_fin_done -ne 0 ]; then
        if [ $kstats_fin_done -eq 1 ]; then
            echo  "# FINALIZE: done"
        else
            if [ $kstats_fin_done -eq 90 ]; then
                echo  "# FINALIZE: not done"
            fi
        fi
    fi

 ;;



 aggregates)

    if [ $kagg_openresty_done -ne 0 ]; then
        if [ $kagg_openresty_done -eq 1 ]; then
            echo "# openresty: built and integrated"
        else
            if [ $kagg_openresty_done -eq 90 ]; then
                echo "# openresty: not integrated"
            fi
        fi
    fi

    if [ $kagg_luafs_done -ne 0 ]; then
        if [ $kagg_luafs_done -eq 1 ]; then
            echo  "# lib luafilesystem: built and integrated"
        else
            if [ $kagg_luafs_done -eq 90 ]; then
                echo  "# lib luafilesystem: not integrated"
            fi
        fi
    fi

    if [ $kagg_lua_resty_template_done -ne 0 ]; then
        if [ $kagg_lua_resty_template_done -eq 1 ]; then
            echo  "# lib lua-resty-template: built and integrated"
        else
            if [ $kagg_lua_resty_template_done -eq 90 ]; then
                echo  "# lib lua-resty-template: not integrated"
            fi
        fi
    fi


    if [ $kagg_lua_router_done -ne 0 ]; then
        if [ $kagg_lua_router_done -eq 1 ]; then
            echo  "# lib router.lua: built and integrated"
        else
            if [ $kagg_lua_router_done -eq 90 ]; then
                echo  "# lib router.lua: not integrated"
            fi
        fi
    fi
                
    if [ $kagg_libdate_done -ne 0 ]; then
        if [ $kagg_libdate_done -eq 1 ]; then
            echo  "# lib date.lua: built and integrated"
        else
            if [ $kagg_libdone_done -eq 90 ]; then
                echo  "# lib date.lua: not integrated"
            fi
        fi
    fi

    if [ $kagg_lua_resty_prettycjson_done -ne 0 ]; then
        if [ $kagg_lua_resty_prettycjson_done -eq 1 ]; then
            echo  "# lib prettycjson.lua: built and integrated"
        else
            if [ $kagg_lua_resty_prettycjson_done -eq 90 ]; then
                echo  "# lib prettycjson.lua: not integrated"
            fi
        fi
    fi

    if [ $kagg_luatz_done -ne 0 ]; then
        if [ $kagg_luatz_done -eq 1 ]; then
            echo  "# lib luatz: built and integrated"
        else
            if [ $kagg_luatz_done -eq 90 ]; then
                echo  "# lib luatz: not integrated"
            fi
        fi
    fi


    if [ $kagg_luazlib_done -ne 0 ]; then
        if [ $kagg_luazlib_done -eq 1 ]; then
            echo  "# lib lua-zlib: built and integrated"
        else
            if [ $kagg_luazlib_done -eq 90 ]; then
                echo  "# lib luazlib: not integrated"
            fi
        fi
    fi

    if [ $kagg_struct_done -ne 0 ]; then
        if [ $kagg_struct_done -eq 1 ]; then
            echo  "# lib struct: built and integrated"
        else
            if [ $kagg_struct_done -eq 90 ]; then
                echo  "# lib struct: not integrated"
            fi
        fi
    fi

    if [ $kagg_zipwriter_done -ne 0 ]; then
        if [ $kagg_zipwriter_done -eq 1 ]; then
            echo  "# lib zipwriter: built and integrated"
        else
            if [ $kagg_zipwriter_done -eq 90 ]; then
                echo  "# lib zipwriter: not integrated"
            fi
        fi
    fi

    if [ $kagg_lua_resty_http_done -ne 0 ]; then
        if [ $kagg_lua_resty_http_done -eq 1 ]; then
            echo  "# lib lua-resty-http: built and integrated"
        else
            if [ $kagg_lua_resty_http_done -eq 90 ]; then
                echo  "# lib lua-resty-http: not integrated"
            fi
        fi
    fi

    if [ ! -z "$build_num" ]; then
        if [ $kagg_lua_inspect_done -ne 0 ]; then
            if [ $kagg_lua_inspect_done -eq 1 ]; then
                echo  "# lib inspect.lua: built and integrated"
            else
                if [ $kagg_lua_inspect_done -eq 90 ]; then
                    echo  "# lib inspect.lua: not integrated"
                fi
            fi
        fi
    fi

    if [ $kagg_redis_done -ne 0 ]; then
        if [ $kagg_redis_done -eq 1 ]; then
            echo  "# redis: built and integrated"
        else
            if [ $kagg_redis_done -eq 90 ]; then
                echo  "# redis: not integrated"
            fi
        fi
    fi

    if [ $kagg_config_done -ne 0 ]; then
        if [ $kagg_config_done -eq 1 ]; then
            echo  "# analytics-kernel nginx.conf: done"
        else
            if [ $kagg_config_done -eq 90 ]; then
                echo  "# analytics-kernel nginx.conf: not done"
            fi
        fi
    fi

    if [ $kagg_tar_pkg_done -eq 1 ]; then
        echo "# tar pkg: ok"
    else
        if [ $kagg_tar_pkg_done -eq 90 ]; then
            echo "# tar pkg: failed"
        fi
    fi
                
    if [ $kagg_rpm_pkg_done -eq 1 ]; then
        echo "# rpm pkg: ok"
    else
        if [ $kagg_rpm_pkg_done -eq 90 ]; then
            echo "# rpm pkg: failed"
        fi
    fi

    if [ $kagg_deb_pkg_done -eq 1 ]; then
        echo "# deb pkg: ok"
    else
        if [ $kagg_deb_pkg_done -eq 90 ]; then
            echo "# deb pkg: failed"
        fi
    fi

    if [ $kagg_fbsd_pkg_done -eq 1 ]; then
        echo "# freebsd pkg: ok"
    else
        if [ $kagg_fbsd_pkg_done -eq 90 ]; then
            echo "# freebsd pkg: failed"
        fi
    fi

    if [ $kagg_fin_done -ne 0 ]; then
        if [ $kagg_fin_done -eq 1 ]; then
            echo  "# FINALIZE: done"
        else
            if [ $kagg_fin_done -eq 90 ]; then
                echo  "# FINALIZE: not done"
            fi
        fi
    fi


esac

echo "#################################################################"

elapsed=0
end=0
if [ "$OS_NAME" = "sunos" ]; then
    end=`nawk 'BEGIN{print srand()}'`
else
    end=`date +%s`
fi

elapsed=`expr $end - $start`

h=`expr $elapsed / 3600`
m=`expr  $elapsed / 60 % 60`
s=`expr $elapsed % 60`
echo "# Total Build time: ${h}h:${m}m:${s}s"
echo "#################################################################"


#cleanup
rm /var/tmp/${STATFILE}
