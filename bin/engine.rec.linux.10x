#!/bin/sh
#
#  Kronometrix Development tools, Linux recording engine 
#  Copyright (c) 2016 Stefan Parvu (www.kronometrix.org).
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  (http://www.gnu.org/copyleft/gpl.html)

# VERSION: 3.4

# ############################################################### #
# Engine: Linux                                                   # 
# ############################################################### #


### extract_archive
extract_archive() {

# $1 module name
# $2 dir build

modfile=$1
bfile=$2

# Debug
# echo "module name: $modfile"
# echo "archive dir: $bfile"

if [ -d $bfile ]; then
    echo "Info: Step 1 - Extracting $bfile ..." | tee -a ${BUILD_PATH}/${BUILD_LOG}
    echo "Warning: ${bfile} directory found, cleaning..." | tee -a ${BUILD_PATH}/${BUILD_LOG}

    rm -rf ${bfile}
    if [ $? -ne 0 ]; then
        echo "Error: cannot clean. Check ${modfile} , ${bfile}" | tee -a ${BUILD_PATH}/${BUILD_LOG}
        exit 3
    fi 
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG}
else
    echo "Info: Step 1 - Extracting $bfile ..." | tee -a ${BUILD_PATH}/${BUILD_LOG}
    gzip -dc ${bfile}.tar.gz | tar xvf - >> ${BUILD_PATH}/${BUILD_LOG}
fi

}


### init_module
init_module() {

# $1 directory name
directory=$1

cd $directory
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $directory" | tee -a ${BUILD_PATH}/${BUILD_LOG}
archive_file=`ls *.tar.gz`
# Debug
#echo "Directory: $directory"
#echo "Archive: $archive_file"

# dirarchive=${archive_file%%.tar*}
dirarchive=`echo $archive_file | sed 's/\.tar.*//'`

# Debug
#echo "DirArchive: $dirarchive"

extract_archive "$directory" "$dirarchive"

cd $dirarchive

}


### clean_module
clean_module() {
cd ..
rm -rf $dirarchive >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cleaning up $dirarchive !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 5
fi
cd ..

}


### perl
build_rec_perl() {
dir=perl
step1=0
step2=0
step3=0
step4=0
step5=0
step6=0

init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

# get CPAN version
cpanver=`echo $dirarchive | sed 's/perl-//'`

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure perl ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "x86_64" ]; then
    sh Configure -Doptimize='-O3' -Duselargefiles -Duse64bitall \
        -Dcf_by="support@kronometrix.org"       \
        -Dcf_email="support@kronometrix.org"    \
        -Dman1dir="none" -Dman3dir="none"        \
        -Dprefix=${iprefix}/perl -des >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    sh Configure -Doptimize='-O3' -Duselargefiles -Duse64bitint \
        -Dcf_by="support@kronometrix.org"       \
        -Dcf_email="support@kronometrix.org"    \
        -Dman1dir="none" -Dman3dir="none"        \
        -Dprefix=${iprefix}/perl -des >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if [ $? -ne 0 ]; then
    echo "Error: configure perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make test perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make test >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make test perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# STEP 5
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 5 - Make install perl..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
 
if [ -d ${iprefix}/perl ]; then
    echo "Warning: perl directory found, cleaning it..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm -rf ${iprefix}/perl
    if [ $? -ne 0 ]; then
        echo "Error: cleaning $dir directory" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
fi
 
make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step5=1
fi

cp ${BUILDER_PREFIX}/etc/Config.pm ${iprefix}/perl/lib/${cpanver}/CPAN
           
# final check; all 5 steps
perl_done=`expr $step1 + $step2 + $step3 + $step4 + $step5`
if [ "$perl_done" -eq 5 ]; then
   perl_done=1
else
   perl_done=90
fi

clean_module

}


### i2c arm7
build_rec_i2c() {
step1=0

# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - i2c module" | tee -a ${BUILD_PATH}/${BUILD_LOG}

for lib in RPi::I2C
do
    ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: $lib installation failed !" |\
            tee -a ${BUILD_LOG}/${module}.${version}.log
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
        continue
    fi
done

# there are 35 perl modules install calls
step1=`expr $step1 / 1`

# final check; all 6 steps
perli2c_done=$step1
if [ "$perli2c_done" -eq 1 ]; then
   perli2c_done=1
else
   perli2c_done=90
fi

}


### klib 
build_rec_klib() {

dir=Kronometrix
step1=0
step2=0
step3=0
step4=0

cd lib/${dir}
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install Proc::Daemon failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

cp script/svcrec ${iprefix}/bin/svcrec
cp script/webrec ${iprefix}/bin/webrec

## final check; all 4 steps
klib_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$klib_done" -eq 4 ]; then
   klib_done=1
else
   klib_done=90
fi

make distclean >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

# back to root
cd ../..

}


### perl Linux::Info
build_rec_perlinuxinfo() {

dir=Linux-Info
step1=0
step2=0
step3=0
step4=0
step5=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

PERL_MM_USE_DEFAULT=1 \
${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi 


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install Linux::Info failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

## final check; all 4 steps
perlinuxinfo_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$perlinuxinfo_done" -eq 4 ]; then
   perlinuxinfo_done=1
else
   perlinuxinfo_done=90
fi

clean_module

# back to root
cd ..

}


### perl Net::SSLeay
build_rec_perlnetssleay() {

dir=Net-SSLeay
step1=0
step2=0
step3=0
step4=0
step5=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

PERL_MM_USE_DEFAULT=1 \
OPENSSL_PREFIX=${iprefix} \
${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install Net-SSLeay failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

## final check; all 4 steps
perlnetssleay_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$perlnetssleay_done" -eq 4 ]; then
   perlnetssleay_done=1
else
   perlnetssleay_done=90
fi

clean_module

# back to root
cd ..

}


### perl IO-Socket-SSL
build_rec_perliossl() {

dir=IO-Socket-SSL
step1=0
step2=0
step3=0
step4=0
step5=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

PERL_MM_USE_DEFAULT=1 \
NO_NETWORK_TESTING=1 \
${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi 

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install IO::Socket::SSL failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi


## final check; all 4 steps
perliossl_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$perliossl_done" -eq 4 ]; then
   perliossl_done=1
else
   perliossl_done=90
fi

clean_module

# back to root
cd ..

}


### perl cpan
build_rec_perlcpan() {

step1=0

# STEP 1
echo "############################################################"
echo "Submodule: Perl CPAN" | tee -a ${BUILD_PATH}/${BUILD_LOG}
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Install Perl CPAN modules" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

for lib in Digest::SHA Proc::Daemon Proc::ProcessTable Proc::PID::File JSON::XS \
           File::Tail Regexp::Common Filesys::Df Sys::Filesystem HTML::TableExtract \
           JSON HTTP::Response UUID::Tiny Carp::Assert Net::Domain::TLD \
           DateTime::Format::ISO8601 ExtUtils::PkgConfig Email::Valid \
           Inline::MakeMaker Capture::Tiny Text::Template AnyEvent \
           Inline::C Date::Calc Linux::Distribution inc::Module::Install DBI \
           Tie::IxHash IO::Interface Redis Net::DHCP::Watch \
           File::stat File::Stat::Bits Net::NTP Filesys::DiskUsage Net::Ping
do
    echo " CPAN module: $lib" | tee -a ${BUILD_PATH}/${BUILD_LOG}
    if  [ "$lib" = "Inline::MakeMaker" -o "$lib" = "JSON::XS" -o "$lib" = "AnyEvent" ]; then
        env PERL_MM_USE_DEFAULT=1 \
        ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
        if [ $? -ne 0 ]; then
            echo "Error: $lib installation failed !" |\
                tee -a ${BUILD_LOG}/${module}.${version}.log
            rm /var/tmp/build.${module}
            exit 3
        else
            step1=`expr $step1 + 1`
            continue
        fi
    else
        ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
        if [ $? -ne 0 ]; then
            echo "Error: $lib installation failed !" |\
                tee -a ${BUILD_LOG}/${module}.${version}.log
            rm /var/tmp/build.${module}
            exit 3
        else
            step1=`expr $step1 + 1`
            continue
        fi
    fi
done

# there are 36 perl modules install calls
step1=`expr $step1 / 36`

## final check; 1 step
perlcpan_done=$step1
if [ "$perlcpan_done" -eq 1 ]; then
   perlcpan_done=1
else
   perlcpan_done=90
fi

}


### perl VM::EC2, Amazon libs
build_rec_perlaws() {

step1=0

# STEP 1
echo "############################################################"
echo "Submodule: AWS EC2" | tee -a ${BUILD_PATH}/${BUILD_LOG}
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Install VM::EC2..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

for lib in XML::Simple
do
    ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: $lib installation failed !" |\
            tee -a ${BUILD_LOG}/${module}.${version}.log
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
        continue
    fi
done

# there are 1 perl modules install calls
step1=`expr $step1 / 1`

## final check; 1 step
perlaws_done=$step1
if [ "$perlaws_done" -eq 1 ]; then
   perlaws_done=1
else
   perlaws_done=90
fi

}


### openssl
build_rec_ossl() {
dir="openssl"
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

#if [ "$PT_NAME" = "x86_64" ]; then
#    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
#     ./Configure linux-x86_64 threads shared --prefix=${iprefix} \
#     --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
#elif [ "$PT_NAME" = "armv6l" ]; then
#    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
#     ./Configure linux-armv4 threads shared --prefix=${iprefix} \
#     --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
#elif [ "$PT_NAME" = "armv7l" ]; then
#    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
#     ./Configure linux-armv4 threads shared --prefix=${iprefix} \
#     --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
#elif [ "$PT_NAME" = "ppc64" ]; then
#    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
#     ./Configure linux-ppc64 threads shared --prefix=${iprefix} \
#     --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
#else
#    env PATH=${iprefix}/bin:${iprefix}/perl/bin:$PATH \
#     ./Configure linux-elf threads shared --prefix=${iprefix} \
#     --openssldir=${iprefix}/openssl >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
#fi

./config -L${iprefix} -Wl,-rpath -Wl,${iprefix}/lib \
--prefix=${iprefix} --openssldir=${iprefix}/ssl  >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

#echo "Fixing SHARED_LDFLAGS flag..." >> ${BUILD_PATH}/${BUILD_LOG}
#if [ "$PT_NAME" = "x86_64" ]; then
#    sed "s:^LDFLAGS=.*:LDFLAGS=-m64 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile > Makefile.tmp
#    sed "s:^LIB_LDFLAGS=.*:LIB_LDFLAGS=-m64 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile.tmp > Makefile.tmp2
#elif [ "$PT_NAME" = "ppc64" ]; then
#    sed "s:^LDFLAGS=.*:LDFLAGS=-m64 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile > Makefile.tmp
#    sed "s:^LIB_LDFLAGS=.*:LIB_LDFLAGS=-m64 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile.tmp > Makefile.tmp2
#elif [ "$PT_NAME" = "armv7l" ]; then
#    sed "s:^LDFLAGS=.*:LDFLAGS=-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile > Makefile.tmp
#    sed "s:^LIB_LDFLAGS=.*:LIB_LDFLAGS=-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile.tmp > Makefile.tmp2
#else
#    sed "s:^LDFLAGS=.*:LDFLAGS=-m32 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile > Makefile.tmp
#    sed "s:^LIB_LDFLAGS=.*:LIB_LDFLAGS=-m32 -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile.tmp > Makefile.tmp2
#fi

#if [ $? -ne 0 ]; then
#    echo "Error: fixing SHARED_LDFLAGS Makefile failed !" |\
#     tee -a ${BUILD_PATH}/${BUILD_LOG}
#    rm /var/tmp/build.${module}
#    exit 3
##fi
#mv Makefile.tmp2 Makefile

make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi


# final check; all 4 steps
ossl_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$ossl_done" -eq 4 ]; then
   ossl_done=1
else
   ossl_done=90
fi

clean_module

# back to root
cd ..

}


### perl Device-SerialPort
build_rec_deviceserial() {

dir=Device-SerialPort
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make test $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make test >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make test failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi


# STEP 5
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 5 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step5=1
fi


# STEP 6
for lib in Device::Modbus Device::Modbus::RTU Device::Modbus::ASCII
do
    ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: $lib installation failed !" |\
        tee -a ${BUILD_LOG}/${module}.${version}.log
        rm /var/tmp/build.${module}
        exit 3
    else
        step6=`expr $step6 + 1`
        continue
    fi
done
# there are 3 perl modules install calls
step6=`expr $step6 / 3`


## final check; all 6 steps
deviceserial_done=`expr $step1 + $step2 + $step3 + $step4 + $step5 + $step6`
if [ "$deviceserial_done" -eq 6 ]; then
   deviceserial_done=1
else
   deviceserial_done=90
fi

clean_module

# back to root
cd ..

}


### libusb
build_rec_libusb() {
dir=libusb
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
 
env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install libusb failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
libusb_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$libusb_done" -eq 4 ]; then
   libusb_done=1
else
   libusb_done=90
fi

clean_module

# back to root
cd ..

}


### perl Device::USB
build_rec_deviceusb() {

dir=Device-USB
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

#export LIBUSB_INCDIR=${iprefix}/include
#export LIBUSB_LIBDIR=${iprefix}/lib

#${iprefix}/perl/bin/perl Makefile.PL LDDLFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" CCFLAGS="${iprefix}/include" >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

## final check; all 4 steps
deviceusb_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$deviceusb_done" -eq 4 ]; then
   deviceusb_done=1
else
   deviceusb_done=90
fi

clean_module

# back to root
cd ..

}


### cares
build_rec_cares() {
dir=c-ares
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env CFLAGS="-O3" \
    CPPFLAGS="-I${iprefix}/include"   \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --prefix=${iprefix} >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install cares failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
cares_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$cares_done" -eq 4 ]; then
   cares_done=1
else
   cares_done=90
fi

clean_module

# back to root
cd ..

}


# perl Crypt-OpenSSL-X509 
build_rec_x509() {
     
dir=Crypt-OpenSSL-X509
step1=0
step2=0
step3=0
step4=0
            
# STEP 1
cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi
    
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
    
     
# STEP 2
#if [ "$PT_NAME" = "x86_64" ]; then
#    cp Makefile.x64 Makefile
#elif [ "$PT_NAME" = "armv7l" ]; then
#    cp Makefile.arm Makefile
#else
#    cp Makefile.i686 Makefile
#fi


${iprefix}/perl/bin/perl Makefile.PL


if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi


# STEP 5
lib='Net::SSL::ExpireDate'
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 5 - Install $lib ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env PERL_MM_USE_DEFAULT=1 \
  ${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: $lib installation failed !" |\
    tee -a ${BUILD_LOG}/${module}.${version}.log
    rm /var/tmp/build.${module}
    exit 3
else
    step5=`expr $step5 + 1`
fi


# final check; all 5 steps
x509_done=`expr $step1 + $step2 + $step3 + $step4 + $step5`
if [ "$x509_done" -eq 5 ]; then
   x509_done=1
else
   x509_done=90
fi

clean_module

# back to root
cd ..

}


### curl
build_rec_curl() {
dir=curl
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
 
#env PKG_CONFIG_PATH=${iprefix}/lib/pkgconfig:/usr/lib64/pkgconfig \
#env CFLAGS="-O3" \
#    CPPFLAGS="-I${iprefix}/include"   \
#    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
#    ./configure --with-ssl=${iprefix} \
#     --prefix=${iprefix} --enable-cookies --enable-nonblocking \
#     --enable-threaded-resolver --without-libssh2 --enable-ares --disable-ldap --disable-ldaps >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
#    --enable-ares --without-libssh2 --disable-ldap --disable-ldaps >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
env CFLAGS="-O3" \
    CPPFLAGS="-I${iprefix}/include"   \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --with-ssl=${iprefix} \
    --prefix=${iprefix} --enable-cookies --enable-nonblocking \
    --enable-threaded-resolver --without-libssh2 --disable-ldap --disable-ldaps >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -f ${iprefix}/bin/curl ]; then
    echo "Warning: $dir binary found, cleaning it..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm ${iprefix}/bin/curl
    rm ${iprefix}/bin/curl-config
    if [ $? -ne 0 ]; then
        echo "Error: cleaning curl binary failed !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi

fi

if [ -d ${iprefix}/lib ]; then
    echo "Warning: lib directory found..." |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    for f in $(find ${iprefix}/lib -name '*curl*')
    do
        echo "Cleaning file: $f..." |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm $f
        if [ $? -ne 0 ]; then
            echo "Error: cleaning lib $f file failed !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    done
fi


make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
curl_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$curl_done" -eq 4 ]; then
   curl_done=1
else
   curl_done=90
fi

clean_module

# back to root
cd ..

}


# perl Net::Curl
build_rec_ncurl() {
     
dir=Net-Curl
step1=0
step2=0
step3=0
step4=0
step5=0
step6=0
            
# STEP 1
cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi
    
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
    
     
# STEP 2
env PATH=${iprefix}/bin:$PATH ${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi


# STEP 5
# AnyEvent::Net::Curl::Queued
#lib=AnyEvent::Net::Curl::Queued
##echo "" >> ${BUILD_PATH}/${BUILD_LOG}
#echo "Info: Step 5 - Install AnyEvent::Net::Curl::Queued ..." |\
# tee -a ${BUILD_PATH}/${BUILD_LOG}
#${iprefix}/perl/bin/perl -MCPAN -e 'install "'$lib'"' >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
#if [ $? -ne 0 ]; then
#    echo "Error: $lib installation failed !" |\
#        tee -a ${BUILD_LOG}/${module}.${version}.log
#    rm /var/tmp/build.${module}
#    exit 3
#else
#    step6=1
#fi
#

# final check; all 5 steps
netcurl_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$netcurl_done" -eq 4 ]; then
   netcurl_done=1
else
   netcurl_done=90
fi

clean_module

# back to root
cd ..

}



### perl WWW::Curl
build_rec_wcurl() {

dir=WWW-Curl
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


env PATH=${iprefix}/bin:$PATH ${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
sed "s:^LDFLAGS =  -fstack-protector -L/usr/local/lib:LDFLAGS = -fstack-protector -L${iprefix}/lib -L/usr/local/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile > Makefile.tmp

mv Makefile.tmp Makefile
sed "s:^LDDLFLAGS = -shared -O3 -L/usr/local/lib -fstack-protector:LDDLFLAGS = -shared -O3 -fstack-protector -L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib:" Makefile > Makefile.tmp
mv Makefile.tmp Makefile

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

## final check; all 4 steps
wwwcurl_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$wwwcurl_done" -eq 4 ]; then
   wwwcurl_done=1
else
   wwwcurl_done=90
fi

clean_module

# back to root
cd ..

}


### sysstat
build_rec_sysstat() {
dir=sysstat
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "x86_64" ]; then
    env CC=cc CFLAGS="-O3" LDFLAGS="-L/lib64 -L/usr/lib64 -Wl,-rpath -Wl,${iprefix}/lib" ./configure \
     man_group=krmx sa_dir=/opt/kronometrix/log conf_dir=/opt/kronometrix/etc  \
     --prefix=/opt/kronometrix --disable-documentation --disable-nls >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
else
    env CC=cc CFLAGS="-O3" LDFLAGS="-L/lib -L/usr/lib -Wl,-rpath -Wl,${iprefix}/lib" ./configure \
     man_group=krmx sa_dir=/opt/kronometrix/log conf_dir=/opt/kronometrix/etc  \
     --prefix=/opt/kronometrix --disable-documentation --disable-nls >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
fi

if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 

# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install perl failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

if [ -d ${iprefix}/share/doc ]; then
    rm -rf ${iprefix}/share/doc
fi


# final check; all 4 steps
sysstat_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$sysstat_done" -eq 4 ]; then
   sysstat_done=1
else
   sysstat_done=90
fi

clean_module

# back to root
cd ..
}


### perl Proc::Daemon
build_rec_procdaemon() {

dir=Proc-Daemon
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


${iprefix}/perl/bin/perl Makefile.PL >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi  


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi 


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make test >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install Proc::Daemon failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

## final check; all 4 steps
procdaemon_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$procdaemon_done" -eq 4 ]; then
   procdaemon_done=1
else
   procdaemon_done=90
fi

clean_module

# back to root
cd ..

}


### libexpat
build_rec_expat() {
dir=expat
step1=0
step2=0
step3=0
step4=0

cd lib
init_module "$dir"
if [ $? -eq 0 ]; then
    step1=1
fi

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Configure $dir ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

env CC=cc CFLAGS="-O3 -I${iprefix}/include" \
    LDFLAGS="-L${iprefix}/lib -Wl,-rpath -Wl,${iprefix}/lib" \
    ./configure --prefix=${iprefix} --without-xmlwf >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: configure $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Make $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}
make >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make $dir failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step3=1
fi


# STEP 4
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 4 - Make install $dir..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

make install >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: make install libusb failed !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step4=1
fi

# final check; all 4 steps
libexpat_done=`expr $step1 + $step2 + $step3 + $step4`
if [ "$libexpat_done" -eq 4 ]; then
   libexpat_done=1
else
   libexpat_done=90
fi

clean_module

# back to root
cd ..

}






### configuration settings
build_rec_scripts() {

dir=bin
step1=0
step2=0

cd ${dir}
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}


# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Installing setenv ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -f setenv ]; then
    cp setenv  ${iprefix}/bin
    if [ $? -ne 0 ]; then
        echo "Error: cannot install setenv script !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
else
    echo "Error: setenv missing, check workspace !" |\
     tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

cd ${OS_NAME}
# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Installing recorders ..." |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

cp *rec ${iprefix}/bin
cp ../webinvrec ${iprefix}/bin
cp ../ntprec ${iprefix}/bin
cp ../direc ${iprefix}/bin
cp ../certrec ${iprefix}/bin
cp ../raw2day ${iprefix}/bin
cp ../u2htime ${iprefix}/bin
cp ../actmsg ${iprefix}/bin
cp ../httprec ${iprefix}/bin
if [ "$PT_NAME" = "armv7l" ]; then
    cp ../axisrec ${iprefix}/bin
    cp ../wsrec ${iprefix}/bin
    cp ../rs485rec ${iprefix}/bin
fi
if [ $? -ne 0 ]; then
    echo "Error: cannot install rec scripts !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=1
fi

# set the other bins
cp sender ${iprefix}/bin
if [ $? -ne 0 ]; then
    echo "Error: cannot install additional bins !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi


# set etc settings
cd ../..
cp etc/*.start ${iprefix}/etc
if [ "$PT_NAME" != "armv7l" ]; then
    rm ${iprefix}/etc/wsrec.start
    rm ${iprefix}/etc/rs485rec.start
    rm ${iprefix}/etc/axisrec.start
    
fi

if [ "$PT_NAME" = "armv7l" ]; then
    cp etc/kronometrix.k1.json ${iprefix}/etc/kronometrix.json
    cp etc/rs485rec.json ${iprefix}/etc
else
    cp etc/kronometrix.json ${iprefix}/etc
fi

cp etc/httprec.json ${iprefix}/etc
cp etc/webrec.json ${iprefix}/etc
cp etc/ntprec.json ${iprefix}/etc
cp etc/direc.json ${iprefix}/etc
cp etc/certrec.json ${iprefix}/etc
cp etc/svcrec.json ${iprefix}/etc
cp etc/rec ${iprefix}/etc
cp etc/transport ${iprefix}/etc
cp etc/${OS_NAME}/logrotate.krmx ${iprefix}/etc
if [ ! -d ${iprefix}/etc/rc ]; then
    mkdir ${iprefix}/etc/rc
fi
cp etc/${OS_NAME}/kdr* ${iprefix}/etc/rc
if [ $? -ne 0 ]; then
    echo "Error: cannot install etc settings !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

# cleanup for non arm platforms

# final check; all 2 steps
recs_done=`expr $step1 + $step2`
if [ "$recs_done" -eq 2 ]; then
   recs_done=1
else
   recs_done=0
fi

# set man pages
if [ ! -d ${iprefix}/man ]; then
    mkdir ${iprefix}/man
fi

cp -pr man/${OS_NAME}/* ${iprefix}/man
if [ $? -ne 0 ]; then
    echo "Error: cannot install man pages !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi
if [ "$PT_NAME" != "armv7l" ]; then
    rm ${iprefix}/man/man1/rs485rec.1
fi

# set LICENSE
cp LICENSE ${iprefix}/
if [ $? -ne 0 ]; then
    echo "Error: cannot install license file !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

# set VERSION
cp VERSION ${iprefix}/
if [ $? -ne 0 ]; then
    echo "Error: cannot install version file !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi


# set release notes
cp CHANGELOG.${OS_NAME} ${iprefix}/CHANGELOG
if [ $? -ne 0 ]; then
    echo "Error: cannot install release.notes !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

# set README 
cp README.${OS_NAME} ${iprefix}/README
if [ $? -ne 0 ]; then
    echo "Error: cannot install README.${OS_NMAE} !" |\
      tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

# set log directory
if [ ! -d ${iprefix}/log ]; then
    # setup daily log
    mkdir -p ${iprefix}/log/daily
    if [ $? -ne 0 ]; then
        echo "Error: cannot set log/daily director !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi

    # setup current log
    mkdir -p ${iprefix}/log/current
    if [ $? -ne 0 ]; then
        echo "Error: cannot set log/current director !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    fi
else
    # we have log dir, check daily, raw
    if [ ! -d ${iprefix}/log/daily ]; then 
        mkdir ${iprefix}/log/daily
        if [ $? -ne 0 ]; then
            echo "Error: cannot set log/daily director !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    fi

    if [ ! -d ${iprefix}/log/current ]; then 
        mkdir ${iprefix}/log/current
        if [ $? -ne 0 ]; then
            echo "Error: cannot set log/current director !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    fi

    # share openssl man page cleanup
    if [ -d ${iprefix}/share ]; then
        rm -rf ${iprefix}/share
        if [ $? -ne 0 ]; then
            echo "Error: cannot clean share director !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    fi

    if [ -d ${iprefix}/openssl/man ]; then
        rm -rf ${iprefix}/openssl/man
        if [ $? -ne 0 ]; then
            echo "Error: cannot clean openssl man director !" |\
             tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        fi
    fi
fi


}


### testing
test_rec_scripts() {

dir=tests
step1=0
step2=0


cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: $dir ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
# Check all recorders if they are sane and execute properly

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Check recorders" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

. ${iprefix}/bin/setenv
for r in sys cpu disk nic hdw
do
    echo "" >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    echo "Executing ${r}rec" | tee -a ${BUILD_PATH}/${BUILD_LOG}
    ${KRMX_BIN}/${r}rec >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    #fi
    if [ $? -ne 0 ]; then
        echo "Error: cannot run ${r}rec !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=`expr $step1 + 1`
    fi
done

step1=`expr $step1 / 5`

# STEP 2
# Check all shared libs if they are build correctly

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Check libs" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

noErrors=0
for lib in `ls ${iprefix}/lib/*.so`
do
    noErrors=`ldd $lib | grep 'not found' | wc -l`
    if [ "$noErrors" -ne 0 ]; then
        echo "LIB ERROR: $lib" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        noErrors=`expr $noErrors + 1`
    fi
done

if [ "$noErrors" -eq 0 ]; then
    step2=1
fi


# final check; all 4 steps
tests_done=`expr $step1 + $step2` 
if [ "$tests_done" -eq 2 ]; then
   tests_done=1
else
   tests_done=90
fi

cd ..

}


### rpm macro configuration file
make_rpmmacro() {

cat > ~/.rpmmacros << "EOF"
%packager       Support Kronometrix
%vendor         Kronometrix

%_topdir        %(echo $HOME)/workspace/kronometrix/recording/pkg/rpm
%_tmppath       %{_topdir}/tmp
%_sourcedir     %{_topdir}/SOURCES/%{name}-%{version}
%_rpmfilename   %{name}-%{version}-%{arch}.rpm
%_specdir       %{_topdir}/SPECS
%_builddir      %{_topdir}/BUILD
%_rpmdir        %{_topdir}/RPMS
EOF

}


### tar package
build_rec_tar_pkg() {

step1=0

krmxver=$version

# export iprefix
export iprefix=${iprefix}

if [ ! -z "$build_num" ]; then
   buildno="$build_num"
else
   buildno=0
fi

cd ${iprefix}/..

if [ "$buildno" -ne 0 ]; then
    tar cf /var/tmp/kdr-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar kronometrix/
    if [ -f /var/tmp/kdr-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        rm /var/tmp/kdr-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2
    fi
    bzip2 /var/tmp/kdr-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar
    if [ $? -ne 0 ]; then
        echo "Error: cannot create kronometrix data recording package !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
else
    # GA General Release
    tar cf /var/tmp/kdr-${krmxver}-${DIST_ID}.${PT_NAME}.tar kronometrix/
    if [ -f /var/tmp/kdr-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        rm /var/tmp/kdr-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2
    fi
    bzip2 /var/tmp/kdr-${krmxver}-${DIST_ID}.${PT_NAME}.tar
    if [ $? -ne 0 ]; then
        echo "Error: cannot create kronometrix data recording package !" |\
         tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
fi

# final check; 1 step
tar_pkg_done=$step1
if [ "$tar_pkg_done" -eq 1 ]; then
   tar_pkg_done=1
else
   tar_pkg_done=90
fi

cd ${WORKSPACE}/${module}

}


### rpm package
build_rec_rpm_pkg() {

dir='pkg/rpm'
step1=0
step2=0
step3=0

krmxver=$version

# export iprefix
export iprefix=${iprefix}

if [ ! -z "$build_num" ]; then
   buildno="$build_num"
else
   buildno=0
fi

cd $dir
echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: rpm package ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}


# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Prepare SOURCE stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


if [ ! -d SPECS ]; then
    echo "Error: cannot find SPECS directory, missing spec file !" |\
        tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
fi

if [ ! -d SOURCES ]; then
    mkdir SOURCES
fi

if [ ! -d SRPMS ]; then
    mkdir SRPMS
fi

if [ ! -d BUILD ]; then
    mkdir BUILD
fi

if [ ! -d RPMS ]; then
    mkdir RPMS
fi

if [ ! -d tmp ]; then
    mkdir tmp
fi

# prepare SOURCES
if [ ! -d "SOURCES/kdr-${krmxver}" ]; then
    mkdir "SOURCES/kdr-${krmxver}"
fi

if [ "$buildno" -ne 0 ]; then
    # Version: 1.0.0
    # Release: b10
    # get control file fixed correct build and version
    sed "s/^Version.*/Version: ${krmxver}/" SPECS/kdr > SPECS/kdr.tmp
    mv SPECS/kdr.tmp SPECS/kdr
    sed "s/^Release.*/Release: b${buildno}/" SPECS/kdr > SPECS/kdr.tmp
    mv SPECS/kdr.tmp SPECS/kdr


    if [ -f /var/tmp/kdr-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        cp /var/tmp/kdr-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2 \
           SOURCES/kdr-${krmxver}/kdr-${krmxver}-${PT_NAME}.tar.bz2
        if [ $? -ne 0 ]; then
            echo "Error: cannot copy tar archive to SOURCE directory !" |\
              tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        else
            step1=1
        fi
    fi
else

    sed "s/^Version.*/Version: ${krmxver}/" SPECS/kdr > SPECS/kdr.tmp
    mv SPECS/kdr.tmp SPECS/kdr
    sed "s/^Release.*/Release: 0/" SPECS/kdr > SPECS/kdr.tmp
    mv SPECS/kdr.tmp SPECS/kdr

    if [ -f /var/tmp/kdr-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        cp /var/tmp/kdr-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2 \
            SOURCES/kdr-${krmxver}/kdr-${krmxver}-${PT_NAME}.tar.bz2
        if [ $? -ne 0 ]; then
            echo "Error: cannot copy tar archive to SOURCE directory !" |\
              tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        else
            step1=1
        fi
    fi
fi


# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Build rpm package" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -f $HOME/.rpmmacros ]; then
    STAMP=`date +"%Y%m%d_%H%M%S"`
    mv $HOME/.rpmmacros $HOME/.rpmmacros.${STAMP}
    make_rpmmacro
else
    make_rpmmacro
fi


if [ -f SPECS/kdr ]; then

    rpmbuild -bb ./SPECS/kdr >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: cannot build rpm, rpmbuild error !" |\
            tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step2=1
    fi
fi


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Cleanup rpm stage directories" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -f RPMS/kdr-${krmxver}-${PT_NAME}.rpm ]; then
    cp RPMS/kdr-${krmxver}-${PT_NAME}.rpm /var/tmp

    if [ $? -eq 0 ]; then
        rm -rf RPMS SOURCES SRPMS BUILD tmp
        rm $HOME/.rpmmacros
        step3=1
    fi

    if [ "$buildno" -ne 0 ]; then
        mv /var/tmp/kdr-${krmxver}-${PT_NAME}.rpm \
         /var/tmp/kdr-${krmxver}b${buildno}-${DIST_ID}${RELOS}-${PT_NAME}.rpm
    else
        mv /var/tmp/kdr-${krmxver}-${PT_NAME}.rpm /var/tmp/kdr-${krmxver}-${DIST_ID}${RELOS}-${PT_NAME}.rpm
    fi
fi


# final check; 3 steps
rpm_pkg_done=`expr $step1 + $step2 + $step3`
if [ "$rpm_pkg_done" -eq 3 ]; then
   rpm_pkg_done=1
else
   rpm_pkg_done=90
fi

cd ../..

}


### deb package
build_rec_deb_pkg() {

dir='pkg/deb'
step1=0
step2=0
step3=0

krmxver=$version

# export iprefix
export iprefix=${iprefix}

if [ ! -z "$build_num" ]; then
   buildno="$build_num"
else
   buildno=0
fi

cd $dir

echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: deb package ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}


# STEP 1
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Create stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ "$PT_NAME" = "x86_64" ]; then
    pkgname="kdr-${krmxver}-amd64"
elif [ "$PT_NAME" = "i686" ]; then
    pkgname="kdr-${krmxver}-i386"
else
    pkgname="kdr-${krmxver}-${PT_NAME}"
fi

if [ ! -d $pkgname ]; then
    mkdir -p "$pkgname/opt"
    mkdir -p "$pkgname/DEBIAN"
    if [ $? -ne 0 ]; then
        echo "Error: cannot copy tar archive to SOURCE directory !" |\
            tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step1=1
    fi
fi


# STEP 2
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 2 - Prepare stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

# copy config files
cp changelog prerm copyright preinst postinst $pkgname/DEBIAN
if [ "$PT_NAME" = "x86_64" ]; then
    cp control.amd64 $pkgname/DEBIAN/control
elif [ "$PT_NAME" = "armv6l" ]; then
    cp control.armv6l $pkgname/DEBIAN/control
elif [ "$PT_NAME" = "armv7l" ]; then
    cp control.armv6l $pkgname/DEBIAN/control
elif [ "$PT_NAME" = "i386" ]; then
    cp control.i386 $pkgname/DEBIAN/control
elif [ "$PT_NAME" = "i686" ]; then
    # cp control.i686 $pkgname/DEBIAN/control
    cp control.i386 $pkgname/DEBIAN/control
fi


# tar package
cd ${pkgname}/opt

if [ "$buildno" -ne 0 ]; then

    # get control file fixed correct build and version
    sed "s/^Version.*/Version:${krmxver}-b${buildno}/" ../../$pkgname/DEBIAN/control > ../../$pkgname/DEBIAN/control.tmp
    mv ../../${pkgname}/DEBIAN/control.tmp ../../${pkgname}/DEBIAN/control

    if [ -f /var/tmp/kdr-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        bzcat /var/tmp/kdr-${krmxver}b${buildno}-${DIST_ID}.${PT_NAME}.tar.bz2 | tar xf -
        if [ $? -ne 0 ]; then
            echo "Error: cannot untar archive !" |\
              tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        else
            step2=1
        fi
    fi
else

    # get control file fixed correct version
    sed "s/^Version.*/Version:${krmxver}/" ../../$pkgname/DEBIAN/control > ../../$pkgname/DEBIAN/control.tmp
    mv ../../${pkgname}/DEBIAN/control.tmp ../../${pkgname}/DEBIAN/control

    if [ -f /var/tmp/kdr-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2 ]; then
        bzcat /var/tmp/kdr-${krmxver}-${DIST_ID}.${PT_NAME}.tar.bz2 | tar xf -
        if [ $? -ne 0 ]; then
            echo "Error: cannot untar archive !" |\
              tee -a ${BUILD_PATH}/${BUILD_LOG}
            rm /var/tmp/build.${module}
            exit 3
        else
            step2=1
        fi
    fi
fi

cd ../..

/usr/bin/dpkg-deb --build $pkgname >> ${BUILD_PATH}/${BUILD_LOG} 2>&1
if [ $? -ne 0 ]; then
    echo "Error: cannot build deb, dpkg-deb error !" |\
        tee -a ${BUILD_PATH}/${BUILD_LOG}
    rm /var/tmp/build.${module}
    exit 3
else
    step2=`expr $step2 + 1`
fi


step2=`expr $step2 / 2`


# STEP 3
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 3 - Cleanup stage directory" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}

if [ -d $pkgname ]; then
    rm -rf $pkgname
    if [ $? -ne 0 ]; then
        echo "Error: cannot clean stage directory !" |\
          tee -a ${BUILD_PATH}/${BUILD_LOG}
        rm /var/tmp/build.${module}
        exit 3
    else
        step3=1
    fi
fi

mv ${pkgname}.deb /var/tmp

# copy config files
# kronometrix-1.0.0-amd64.deb
if [ "$buildno" -ne 0 ]; then
    if [ "$PT_NAME" = "x86_64" ]; then
        mv /var/tmp/kdr-${krmxver}-amd64.deb \
         /var/tmp/kdr-${krmxver}b${buildno}-${DIST_ID}${RELOS}-amd64.deb
    elif [ "$PT_NAME" = "i686" ]; then
        mv /var/tmp/kdr-${krmxver}-i386.deb \
         /var/tmp/kdr-${krmxver}b${buildno}-${DIST_ID}${RELOS}-i386.deb
    else
        mv /var/tmp/kdr-${krmxver}-${PT_NAME}.deb \
         /var/tmp/kdr-${krmxver}b${buildno}-${DIST_ID}${RELOS}-${PT_NAME}.deb
    fi
else
    if [ "$PT_NAME" = "x86_64" ]; then
        mv /var/tmp/kdr-${krmxver}-amd64.deb /var/tmp/kdr-${krmxver}-${DIST_ID}${RELOS}-amd64.deb
    elif [ "$PT_NAME" = "i686" ]; then
        mv /var/tmp/kdr-${krmxver}-i386.deb /var/tmp/kdr-${krmxver}-${DIST_ID}${RELOS}-i386.deb
    else
        mv /var/tmp/kdr-${krmxver}-${PT_NAME}.deb /var/tmp/kdr-${krmxver}-${DIST_ID}${RELOS}-${PT_NAME}.deb
    fi
fi

# final check; 3 steps
deb_pkg_done=`expr $step1 + $step2 + $step3`
if [ "$deb_pkg_done" -eq 3 ]; then
   deb_pkg_done=1
else
   deb_pkg_done=90
fi

cd ../..

}


build_rec_pkg() {

dir=pkg
step1=0
step2=0


echo "############################################################"
echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Submodule: tar package ${OS_NAME}" | tee -a ${BUILD_PATH}/${BUILD_LOG}

# STEP 1
# tar package must be created

echo "" >> ${BUILD_PATH}/${BUILD_LOG}
echo "Info: Step 1 - Kronometrix tar package" |\
 tee -a ${BUILD_PATH}/${BUILD_LOG}


case "$DIST_ID" in
    centos|rhel|sles)
        PT_NAME=$HW_NAME
        build_rec_tar_pkg
        build_rec_rpm_pkg
    ;;

    debian|ubuntu|raspbian)
        build_rec_tar_pkg
        build_rec_deb_pkg
    ;;
               
    *)
        echo "Not supported Linux distro, check builder"
        exit 3
    ;;
esac


}


